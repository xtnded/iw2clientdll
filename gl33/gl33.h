
/* This file was auto-generated by Galogen */
#ifndef _GALOGEN_HEADER_
#define _GALOGEN_HEADER_
#if defined(__gl_h_) || defined(__GL_H__) || defined(__glext_h_) || defined(__GLEXT_H_) || defined(__gltypes_h_) || defined(__glcorearb_h_) || defined(__gl_glcorearb_h)
#error Galogen-generated header included after a GL header.
#endif

#define __gl_h_ 1
#define __gl32_h_ 1
#define __gl31_h_ 1
#define __GL_H__ 1
#define __glext_h_ 1
#define __GLEXT_H_ 1
#define __gltypes_h_ 1
#define __glcorearb_h_ 1
#define __gl_glcorearb_h_ 1

#if defined(_WIN32)
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#define GL_APIENTRY APIENTRY
#else
#define GL_APIENTRY
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#define GALOGEN_API_NAME "gl"
#define GALOGEN_API_PROFILE "compatibility"
#define GALOGEN_API_VER_MAJ 4
#define GALOGEN_API_VER_MIN 0
typedef unsigned int  GLenum;
typedef unsigned int  GLuint;
typedef int  GLsizei;
typedef char  GLchar;
typedef struct __GLsync * GLsync;
//#include <KHR/khrplatform.h>
typedef INT64  GLint64;
typedef size_t  GLsizeiptr;
typedef UINT16  GLushort;
typedef float  GLfloat;
typedef void  GLvoid;
typedef UINT64  GLuint64;
typedef double  GLdouble;
typedef INT8  GLbyte;
typedef int  GLint;
typedef float  GLclampf;
typedef INT16  GLshort;
typedef UINT16  GLhalf;
typedef UINT8  GLubyte;
typedef unsigned int  GLbitfield;
typedef intptr_t  GLintptr;
typedef double  GLclampd;
typedef unsigned char  GLboolean;
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_PATCHES 0x000E
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2 0x8F46
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_ISOLINES 0x8E7A
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_SAMPLE_SHADING 0x8C36
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_TIME_ELAPSED 0x88BF
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_RGB10_A2UI 0x906F
#define GL_SAMPLER_BINDING 0x8919
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_SRC1_COLOR 0x88F9
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_SAMPLE_POSITION 0x8E50
#define GL_WAIT_FAILED 0x911D
#define GL_ALREADY_SIGNALED 0x911A
#define GL_SIGNALED 0x9119
#define GL_UNSIGNALED 0x9118
#define GL_SYNC_FENCE 0x9116
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_STATUS 0x9114
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_DEPTH_CLAMP 0x864F
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_INVALID_INDEX 0xFFFFFFFFu
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_RGB16_SNORM 0x8F9A
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_R16_SNORM 0x8F98
#define GL_RGB8_SNORM 0x8F96
#define GL_R8_SNORM 0x8F94
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_RG32UI 0x823C
#define GL_RG16I 0x8239
#define GL_RG8I 0x8237
#define GL_R32I 0x8235
#define GL_R16UI 0x8234
#define GL_R16I 0x8233
#define GL_R8UI 0x8232
#define GL_R8I 0x8231
#define GL_RG32F 0x8230
#define GL_RG16F 0x822F
#define GL_R32F 0x822E
#define GL_RG8 0x822B
#define GL_R8 0x8229
#define GL_RG_INTEGER 0x8228
#define GL_RG 0x8227
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_READ_BIT 0x0001
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_HALF_FLOAT 0x140B
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX1 0x8D46
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER 0x8D41
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_R16 0x822A
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_WAIT 0x8E13
#define GL_OBJECT_TYPE 0x9112
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_PATCH_VERTICES 0x8E72
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_BGRA_INTEGER 0x8D9B
#define GL_RGBA_INTEGER 0x8D99
#define GL_RED_INTEGER 0x8D94
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_RGBA8I 0x8D8E
#define GL_RGB16I 0x8D89
#define GL_RGB32I 0x8D83
#define GL_RGBA32I 0x8D82
#define GL_RGB16UI 0x8D77
#define GL_RGBA16UI 0x8D76
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_ALPHA_INTEGER 0x8D97
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_RGB16F 0x881B
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_RGBA16F 0x881A
#define GL_RGB32F 0x8815
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RED 0x8225
#define GL_NUM_EXTENSIONS 0x821D
#define GL_MINOR_VERSION 0x821C
#define GL_MAJOR_VERSION 0x821B
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_CLIP_DISTANCE7 0x3007
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_PLANE2 0x3002
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_PLANE1 0x3001
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_RG8_SNORM 0x8F95
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_SRGB8 0x8C41
#define GL_SRGB 0x8C40
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_COORD_REPLACE 0x8862
#define GL_POINT_SPRITE 0x8861
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_UPPER_LEFT 0x8CA2
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_VALIDATE_STATUS 0x8B83
#define GL_COMPILE_STATUS 0x8B81
#define GL_DELETE_STATUS 0x8B80
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SPHERE_MAP 0x2402
#define GL_OBJECT_LINEAR 0x2401
#define GL_RGBA8 0x8058
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_BLEND_DST_RGB 0x80C8
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_FLAT 0x1D00
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_TEXTURE_ENV 0x2300
#define GL_ALPHA4 0x803B
#define GL_SHININESS 0x1601
#define GL_3_BYTES 0x1408
#define GL_2_BYTES 0x1407
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_DIRECTION 0x1204
#define GL_POSITION 0x1203
#define GL_SPECULAR 0x1202
#define GL_RGBA8UI 0x8D7C
#define GL_INDEX_MODE 0x0C30
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_DIFFUSE 0x1201
#define GL_FLOAT 0x1406
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_PROJECTION 0x1701
#define GL_RGB10_A2 0x8059
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_TEXTURE_BORDER 0x1005
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_CONDITION_SATISFIED 0x911C
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_LINE_WIDTH 0x0B21
#define GL_STREAM_DRAW 0x88E0
#define GL_ALPHA_TEST 0x0BC0
#define GL_MAP2_INDEX 0x0DB1
#define GL_RGBA_MODE 0x0C31
#define GL_SHADER_TYPE 0x8B4F
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_OR_REVERSE 0x150B
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_STEREO 0x0C33
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_STATIC_DRAW 0x88E4
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_INTERPOLATE 0x8575
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_MAP1_COLOR_4 0x0D90
#define GL_TEXTURE10 0x84CA
#define GL_COLOR_INDEXES 0x1603
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_DEPTH_BITS 0x0D56
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_TEXTURE31 0x84DF
#define GL_DRAW_BUFFER7 0x882C
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_BYTE 0x1400
#define GL_SAMPLER_CUBE 0x8B60
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_LIGHT2 0x4002
#define GL_ALPHA_SCALE 0x0D1C
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_ALPHA16 0x803E
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_C4UB_V2F 0x2A22
#define GL_STREAM_READ 0x88E1
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_GREEN_BIAS 0x0D19
#define GL_RGBA8_SNORM 0x8F97
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_ZERO 0
#define GL_STENCIL 0x1802
#define GL_AMBIENT 0x1200
#define GL_CURRENT_QUERY 0x8865
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_MAP_COLOR 0x0D10
#define GL_DOT3_RGBA 0x86AF
#define GL_XOR 0x1506
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_READ_ONLY 0x88B8
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_POLYGON_TOKEN 0x0703
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_LIGHT1 0x4001
#define GL_ALPHA12 0x803D
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SELECT 0x1C02
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_SOURCE0_RGB 0x8580
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_INDEX 0x8222
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_BLUE_BIAS 0x0D1B
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_NORMAL_ARRAY 0x8075
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_BLEND_DST 0x0BE0
#define GL_DRAW_BUFFER12 0x8831
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_PLANE0 0x3000
#define GL_RENDER_MODE 0x0C40
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_UNSIGNED_BYTE 0x1401
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_COMPRESSED_RGB 0x84ED
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_OPERAND0_RGB 0x8590
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_COMBINE_RGB 0x8571
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_FOG_INDEX 0x0B61
#define GL_FOG 0x0B60
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_BLUE_SCALE 0x0D1A
#define GL_TEXTURE0 0x84C0
#define GL_LIGHTING 0x0B50
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_EDGE_FLAG 0x0B43
#define GL_NORMALIZE 0x0BA1
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_MIN 0x8007
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_INVALID_VALUE 0x0501
#define GL_MAP_WRITE_BIT 0x0002
#define GL_BOOL 0x8B56
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_R16F 0x822D
#define GL_FRONT_RIGHT 0x0401
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_LINE_STIPPLE 0x0B24
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_POINT_SMOOTH 0x0B10
#define GL_SAMPLE_MASK 0x8E51
#define GL_BLUE_INTEGER 0x8D96
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_SRC0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA 0x8588
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_FOG_START 0x0B63
#define GL_MODULATE 0x2100
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_LIST_INDEX 0x0B33
#define GL_STENCIL_INDEX8 0x8D48
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_4_BYTES 0x1409
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_DOMAIN 0x0A02
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_VERTEX_ARRAY 0x8074
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_WRITE_ONLY 0x88B9
#define GL_ORDER 0x0A01
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_REPEAT 0x2901
#define GL_BITMAP_TOKEN 0x0704
#define GL_SCISSOR_BIT 0x00080000
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_LINE_TOKEN 0x0702
#define GL_EXTENSIONS 0x1F03
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_3D_COLOR 0x0602
#define GL_FRONT_FACE 0x0B46
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_RG16 0x822C
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_AUX3 0x040C
#define GL_SHORT 0x1402
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_STENCIL_TEST 0x0B90
#define GL_LUMINANCE4 0x803F
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_AUX1 0x040A
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_BITMAP 0x1A00
#define GL_ALWAYS 0x0207
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_T4F_V4F 0x2A28
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_FLOAT_VEC4 0x8B52
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_DEPTH_RANGE 0x0B70
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_PRIMARY_COLOR 0x8577
#define GL_DEPTH_SCALE 0x0D1E
#define GL_POINT_SIZE 0x0B11
#define GL_RGB8 0x8051
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DECAL 0x2101
#define GL_BLEND_SRC 0x0BE1
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_DITHER 0x0BD0
#define GL_TEXTURE_DEPTH 0x8071
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_NEVER 0x0200
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_INTENSITY 0x8049
#define GL_S 0x2000
#define GL_RG16UI 0x823A
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_BOOL_VEC2 0x8B57
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_LIST_MODE 0x0B30
#define GL_HINT_BIT 0x00008000
#define GL_EVAL_BIT 0x00010000
#define GL_STENCIL_FUNC 0x0B92
#define GL_RESCALE_NORMAL 0x803A
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_TRIANGLE_FAN 0x0006
#define GL_Q 0x2003
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_SPOT_CUTOFF 0x1206
#define GL_LINK_STATUS 0x8B82
#define GL_INT 0x1404
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_STACK_UNDERFLOW 0x0504
#define GL_RGBA32F 0x8814
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_COEFF 0x0A00
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TRANSFORM_BIT 0x00001000
#define GL_ADD 0x0104
#define GL_DOUBLE 0x140A
#define GL_BUFFER_MAPPED 0x88BC
#define GL_FOG_COLOR 0x0B66
#define GL_EXP 0x0800
#define GL_RGBA4 0x8056
#define GL_CULL_FACE 0x0B44
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_VERSION 0x1F02
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_RGBA32UI 0x8D70
#define GL_DECR_WRAP 0x8508
#define GL_INDEX_SHIFT 0x0D12
#define GL_LINE 0x1B01
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_OPERAND1_ALPHA 0x8599
#define GL_DST_ALPHA 0x0304
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_VIEWPORT 0x0BA2
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_GEQUAL 0x0206
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_DRAW_BUFFER 0x0C01
#define GL_GREATER 0x0204
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_LEFT 0x0406
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_NAND 0x150E
#define GL_EQUAL 0x0202
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_FRAMEBUFFER 0x8D40
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_LINES 0x0001
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_DOT3_RGB 0x86AE
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_MODELVIEW 0x1700
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_TRIANGLE_STRIP 0x0005
#define GL_CURRENT_COLOR 0x0B00
#define GL_UNSIGNED_INT 0x1405
#define GL_T 0x2001
#define GL_DRAW_BUFFER4 0x8829
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_RGBA 0x1908
#define GL_R32UI 0x8236
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TRIANGLES 0x0004
#define GL_OBJECT_PLANE 0x2501
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_NOTEQUAL 0x0205
#define GL_POINT_TOKEN 0x0701
#define GL_TRUE 1
#define GL_TEXTURE_1D 0x0DE0
#define GL_TIMESTAMP 0x8E28
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_EYE_LINEAR 0x2400
#define GL_QUADS 0x0007
#define GL_SOURCE2_RGB 0x8582
#define GL_DONT_CARE 0x1100
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_LINE_SMOOTH 0x0B20
#define GL_R 0x2002
#define GL_BLUE_BITS 0x0D54
#define GL_RGBA16I 0x8D88
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_FALSE 0
#define GL_INVALID_OPERATION 0x0502
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_UNIFORM_SIZE 0x8A38
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_BACK 0x0405
#define GL_READ_BUFFER 0x0C02
#define GL_FOG_HINT 0x0C54
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_STENCIL_INDEX 0x1901
#define GL_RED_BIAS 0x0D15
#define GL_LOAD 0x0101
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_LEQUAL 0x0203
#define GL_REPLACE 0x1E01
#define GL_LINE_STRIP 0x0003
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_POLYGON_BIT 0x00000008
#define GL_TEXTURE23 0x84D7
#define GL_FRONT_AND_BACK 0x0408
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_ONE 1
#define GL_SCISSOR_TEST 0x0C11
#define GL_SLUMINANCE8 0x8C47
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_LINE_LOOP 0x0002
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_LIGHT5 0x4005
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_RGB8UI 0x8D7D
#define GL_SRC_COLOR 0x0300
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_TEXTURE 0x1702
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_SRC1_RGB 0x8581
#define GL_SOURCE1_RGB 0x8581
#define GL_DOUBLEBUFFER 0x0C32
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_CONSTANT_ALPHA 0x8003
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_COPY 0x1503
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_FOG_COORDINATE 0x8451
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_FRONT_LEFT 0x0400
#define GL_LIGHT0 0x4000
#define GL_RG32I 0x823B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_INDEX_OFFSET 0x0D13
#define GL_LIST_BASE 0x0B32
#define GL_BUFFER_USAGE 0x8765
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_RED_BITS 0x0D52
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_TEXTURE20 0x84D4
#define GL_ENABLE_BIT 0x00002000
#define GL_COLOR_INDEX 0x1900
#define GL_STENCIL_REF 0x0B97
#define GL_BLEND_EQUATION 0x8009
#define GL_EMISSION 0x1600
#define GL_POINT_BIT 0x00000002
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_LINE_BIT 0x00000004
#define GL_INDEX_BITS 0x0D51
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_DST_COLOR 0x0306
#define GL_POINTS 0x0000
#define GL_CLEAR 0x1500
#define GL_DRAW_BUFFER14 0x8833
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_TEXTURE22 0x84D6
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BACK_RIGHT 0x0403
#define GL_CURRENT_NORMAL 0x0B02
#define GL_RIGHT 0x0407
#define GL_DOUBLE_MAT3 0x8F47
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_RGB5_A1 0x8057
#define GL_SOURCE2_ALPHA 0x858A
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_FRONT 0x0404
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_STENCIL_BITS 0x0D57
#define GL_NO_ERROR 0
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_INVALID_ENUM 0x0500
#define GL_NOOP 0x1505
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_RGB32UI 0x8D71
#define GL_TEXTURE_2D 0x0DE1
#define GL_RENDER 0x1C00
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_ZOOM_X 0x0D16
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_TEXTURE_WIDTH 0x1000
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_FOG_BIT 0x00000080
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_DRAW_BUFFER2 0x8827
#define GL_GREEN_INTEGER 0x8D95
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_ALPHA_BIAS 0x0D1D
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_RED 0x1903
#define GL_RGB 0x1907
#define GL_STENCIL_FAIL 0x0B94
#define GL_NICEST 0x1102
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_MAX_LIGHTS 0x0D31
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_INVERT 0x150A
#define GL_FASTEST 0x1101
#define GL_KEEP 0x1E00
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_TEXTURE14 0x84CE
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_GREEN_BITS 0x0D53
#define GL_CCW 0x0901
#define GL_AND_INVERTED 0x1504
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_TEXTURE25 0x84D9
#define GL_BLEND_COLOR 0x8005
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TEXTURE_BIT 0x00040000
#define GL_STACK_OVERFLOW 0x0503
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_LUMINANCE16 0x8042
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_LESS 0x0201
#define GL_COPY_INVERTED 0x150C
#define GL_OR 0x1507
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_QUAD_STRIP 0x0008
#define GL_AUX_BUFFERS 0x0C00
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_MAX 0x8008
#define GL_CULL_FACE_MODE 0x0B45
#define GL_VIEWPORT_BIT 0x00000800
#define GL_OUT_OF_MEMORY 0x0505
#define GL_EQUIV 0x1509
#define GL_LUMINANCE8 0x8040
#define GL_2D 0x0600
#define GL_LIST_BIT 0x00020000
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_BLEND 0x0BE2
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_OR_INVERTED 0x150D
#define GL_DEPTH_TEST 0x0B71
#define GL_DYNAMIC_COPY 0x88EA
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_DEPTH_FUNC 0x0B74
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_DEPTH_COMPONENT 0x1902
#define GL_GREEN 0x1904
#define GL_NOR 0x1508
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_BLUE 0x1905
#define GL_GREEN_SCALE 0x0D18
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_INCR 0x1E02
#define GL_RGBA16_SNORM 0x8F9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_RGB_SCALE 0x8573
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_ALPHA 0x1906
#define GL_SYNC_CONDITION 0x9113
#define GL_R3_G3_B2 0x2A10
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_FILL 0x1B02
#define GL_LINEAR 0x2601
#define GL_FOG_MODE 0x0B65
#define GL_MAP1_INDEX 0x0D91
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_DECR 0x1E03
#define GL_GENERATE_MIPMAP 0x8191
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_MAP_STENCIL 0x0D11
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_VENDOR 0x1F00
#define GL_MATRIX_MODE 0x0BA0
#define GL_SET 0x150F
#define GL_RENDERER 0x1F01
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_NEAREST 0x2600
#define GL_POLYGON 0x0009
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_BACK_LEFT 0x0402
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_LUMINANCE 0x1909
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_RGB_INTEGER 0x8D98
#define GL_SOURCE1_ALPHA 0x8589
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_LIGHTING_BIT 0x00000040
#define GL_COMPILE 0x1300
#define GL_RETURN 0x0102
#define GL_MAP1_NORMAL 0x0D92
#define GL_EYE_PLANE 0x2502
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_UNSIGNED_SHORT 0x1403
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIP_PLANE2 0x3002
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_CLIP_PLANE4 0x3004
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_COMBINE 0x8570
#define GL_OPERAND2_RGB 0x8592
#define GL_BUFFER_ACCESS 0x88BB
#define GL_CLIP_PLANE5 0x3005
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_SMOOTH 0x1D01
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_RG16_SNORM 0x8F99
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_EXP2 0x0801
#define GL_POINT 0x1B00
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_C3F_V3F 0x2A24
#define GL_SHADE_MODEL 0x0B54
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_ALPHA_BITS 0x0D55
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_CURRENT_BIT 0x00000001
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_SRC0_RGB 0x8580
#define GL_SOURCE0_RGB 0x8580
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_RGB4 0x804F
#define GL_DRAW_BUFFER3 0x8828
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_RGB5 0x8050
#define GL_AUX2 0x040B
#define GL_BGRA 0x80E1
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_DRAW_BUFFER5 0x882A
#define GL_RGBA2 0x8055
#define GL_TEXTURE19 0x84D3
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_TEXTURE_3D 0x806F
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUERY_RESULT 0x8866
#define GL_CLIP_PLANE3 0x3003
#define GL_STATIC_READ 0x88E5
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_DRAW_BUFFER11 0x8830
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_COLOR_ARRAY 0x8076
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_INDEX_ARRAY 0x8077
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_FOG_DENSITY 0x0B62
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_DRAW_BUFFER10 0x882F
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_RGB8I 0x8D8F
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_DRAW_BUFFER8 0x882D
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_SRC_ALPHA 0x0302
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_DRAW_BUFFER6 0x882B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_FUNC_SUBTRACT 0x800A
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_ADD_SIGNED 0x8574
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE28 0x84DC
#define GL_ALPHA8 0x803C
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_LUMINANCE12 0x8041
#define GL_ACCUM 0x0100
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_INTENSITY4 0x804A
#define GL_3D 0x0601
#define GL_INTENSITY8 0x804B
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_INTENSITY12 0x804C
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_TEXTURE7 0x84C7
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_C4UB_V3F 0x2A23
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_CONTEXT_FLAGS 0x821E
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_COLOR 0x1800
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_CLIP_PLANE1 0x3001
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_CW 0x0900
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_LOGIC_OP 0x0BF1
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_LINES_ADJACENCY 0x000A
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_SINGLE_COLOR 0x81F9
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_TEXTURE1 0x84C1
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_INT_VEC2 0x8B53
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE6 0x84C6
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_AUX0 0x0409
#define GL_TEXTURE11 0x84CB
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_SAMPLES 0x80A9
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_TEXTURE17 0x84D1
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE18 0x84D2
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_RG8UI 0x8238
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_TEXTURE21 0x84D5
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_FLOAT_MAT4 0x8B5C
#define GL_DRAW_BUFFER9 0x882E
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_TEXTURE26 0x84DA
#define GL_N3F_V3F 0x2A25
#define GL_POLYGON_MODE 0x0B40
#define GL_SRC2_RGB 0x8582
#define GL_SOURCE2_RGB 0x8582
#define GL_TEXTURE27 0x84DB
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_BGR 0x80E0
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SCISSOR_BOX 0x0C10
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_POINT_SIZE_MAX 0x8127
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE24 0x84D8
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_FEEDBACK 0x1C01
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_SRGB_ALPHA 0x8C42
#define GL_CLAMP 0x2900
#define GL_NORMAL_MAP 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_MIRRORED_REPEAT 0x8370
#define GL_RGB9_E5 0x8C3D
#define GL_SOURCE0_ALPHA 0x8588
#define GL_DEPTH 0x1801
#define GL_TEXTURE30 0x84DE
#define GL_OPERAND1_RGB 0x8591
#define GL_BUFFER_SIZE 0x8764
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_ZOOM_Y 0x0D17
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND2_ALPHA 0x859A
#define GL_SUBTRACT 0x84E7
#define GL_SOURCE1_RGB 0x8581
#define GL_CONSTANT 0x8576
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_STENCIL_INDEX16 0x8D49
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_INCR_WRAP 0x8507
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_CLIP_PLANE0 0x3000
#define GL_INTENSITY16 0x804D
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_MAP2_NORMAL 0x0DB2
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CONSTANT_COLOR 0x8001
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_FLOAT_VEC3 0x8B51
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_READ 0x88E9
#define GL_SAMPLES_PASSED 0x8914
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_LOWER_LEFT 0x8CA1
#define GL_SRC1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA 0x8589
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_PREVIOUS 0x8578
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_FIXED_ONLY 0x891D
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_SRC2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA 0x858A
#define GL_AUTO_NORMAL 0x0D80
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_COMBINE_ALPHA 0x8572
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_RED_SCALE 0x0D14
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_COLOR_SUM 0x8458
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER15 0x8834
#define GL_SAMPLER_3D 0x8B5F
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_FOG_END 0x0B64
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_SAMPLER_1D 0x8B5D
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_INT_VEC4 0x8B55
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_MULT 0x0103
#define GL_FLOAT_VEC2 0x8B50
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INT_VEC3 0x8B54
#define GL_BOOL_VEC3 0x8B58
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_BOOL_VEC4 0x8B59
#define GL_NONE 0
#define GL_FLOAT_MAT2 0x8B5A
#define GL_SAMPLER_2D 0x8B5E

typedef void (GL_APIENTRY *PFN_glEndQueryIndexed)(GLenum target, GLuint index);
extern PFN_glEndQueryIndexed _glptr_glEndQueryIndexed;
#define glEndQueryIndexed _glptr_glEndQueryIndexed

typedef void (GL_APIENTRY *PFN_glDrawTransformFeedback)(GLenum mode, GLuint id);
extern PFN_glDrawTransformFeedback _glptr_glDrawTransformFeedback;
#define glDrawTransformFeedback _glptr_glDrawTransformFeedback

typedef GLboolean (GL_APIENTRY *PFN_glIsTransformFeedback)(GLuint id);
extern PFN_glIsTransformFeedback _glptr_glIsTransformFeedback;
#define glIsTransformFeedback _glptr_glIsTransformFeedback

typedef void (GL_APIENTRY *PFN_glGenTransformFeedbacks)(GLsizei n, GLuint * ids);
extern PFN_glGenTransformFeedbacks _glptr_glGenTransformFeedbacks;
#define glGenTransformFeedbacks _glptr_glGenTransformFeedbacks

typedef void (GL_APIENTRY *PFN_glDeleteTransformFeedbacks)(GLsizei n, const GLuint * ids);
extern PFN_glDeleteTransformFeedbacks _glptr_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks _glptr_glDeleteTransformFeedbacks

typedef void (GL_APIENTRY *PFN_glPatchParameterfv)(GLenum pname, const GLfloat * values);
extern PFN_glPatchParameterfv _glptr_glPatchParameterfv;
#define glPatchParameterfv _glptr_glPatchParameterfv

typedef void (GL_APIENTRY *PFN_glPatchParameteri)(GLenum pname, GLint value);
extern PFN_glPatchParameteri _glptr_glPatchParameteri;
#define glPatchParameteri _glptr_glPatchParameteri

typedef void (GL_APIENTRY *PFN_glGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
extern PFN_glGetProgramStageiv _glptr_glGetProgramStageiv;
#define glGetProgramStageiv _glptr_glGetProgramStageiv

typedef void (GL_APIENTRY *PFN_glGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
extern PFN_glGetActiveSubroutineName _glptr_glGetActiveSubroutineName;
#define glGetActiveSubroutineName _glptr_glGetActiveSubroutineName

typedef GLuint (GL_APIENTRY *PFN_glGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar * name);
extern PFN_glGetSubroutineIndex _glptr_glGetSubroutineIndex;
#define glGetSubroutineIndex _glptr_glGetSubroutineIndex

typedef GLint (GL_APIENTRY *PFN_glGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar * name);
extern PFN_glGetSubroutineUniformLocation _glptr_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation _glptr_glGetSubroutineUniformLocation

typedef void (GL_APIENTRY *PFN_glUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix2x4dv _glptr_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv _glptr_glUniformMatrix2x4dv

typedef void (GL_APIENTRY *PFN_glUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix3dv _glptr_glUniformMatrix3dv;
#define glUniformMatrix3dv _glptr_glUniformMatrix3dv

typedef void (GL_APIENTRY *PFN_glUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix2dv _glptr_glUniformMatrix2dv;
#define glUniformMatrix2dv _glptr_glUniformMatrix2dv

typedef void (GL_APIENTRY *PFN_glUniform4dv)(GLint location, GLsizei count, const GLdouble * value);
extern PFN_glUniform4dv _glptr_glUniform4dv;
#define glUniform4dv _glptr_glUniform4dv

typedef void (GL_APIENTRY *PFN_glUniform1dv)(GLint location, GLsizei count, const GLdouble * value);
extern PFN_glUniform1dv _glptr_glUniform1dv;
#define glUniform1dv _glptr_glUniform1dv

typedef void (GL_APIENTRY *PFN_glUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
extern PFN_glUniform3d _glptr_glUniform3d;
#define glUniform3d _glptr_glUniform3d

typedef void (GL_APIENTRY *PFN_glUniform2d)(GLint location, GLdouble x, GLdouble y);
extern PFN_glUniform2d _glptr_glUniform2d;
#define glUniform2d _glptr_glUniform2d

typedef void (GL_APIENTRY *PFN_glUniform1d)(GLint location, GLdouble x);
extern PFN_glUniform1d _glptr_glUniform1d;
#define glUniform1d _glptr_glUniform1d

typedef void (GL_APIENTRY *PFN_glBindTransformFeedback)(GLenum target, GLuint id);
extern PFN_glBindTransformFeedback _glptr_glBindTransformFeedback;
#define glBindTransformFeedback _glptr_glBindTransformFeedback

typedef void (GL_APIENTRY *PFN_glDrawArraysIndirect)(GLenum mode, const void * indirect);
extern PFN_glDrawArraysIndirect _glptr_glDrawArraysIndirect;
#define glDrawArraysIndirect _glptr_glDrawArraysIndirect

typedef void (GL_APIENTRY *PFN_glBlendEquationi)(GLuint buf, GLenum mode);
extern PFN_glBlendEquationi _glptr_glBlendEquationi;
#define glBlendEquationi _glptr_glBlendEquationi

typedef void (GL_APIENTRY *PFN_glSecondaryColorP3uiv)(GLenum type, const GLuint * color);
extern PFN_glSecondaryColorP3uiv _glptr_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv _glptr_glSecondaryColorP3uiv

typedef void (GL_APIENTRY *PFN_glSecondaryColorP3ui)(GLenum type, GLuint color);
extern PFN_glSecondaryColorP3ui _glptr_glSecondaryColorP3ui;
#define glSecondaryColorP3ui _glptr_glSecondaryColorP3ui

typedef void (GL_APIENTRY *PFN_glColorP3uiv)(GLenum type, const GLuint * color);
extern PFN_glColorP3uiv _glptr_glColorP3uiv;
#define glColorP3uiv _glptr_glColorP3uiv

typedef void (GL_APIENTRY *PFN_glNormalP3uiv)(GLenum type, const GLuint * coords);
extern PFN_glNormalP3uiv _glptr_glNormalP3uiv;
#define glNormalP3uiv _glptr_glNormalP3uiv

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords);
extern PFN_glMultiTexCoordP3ui _glptr_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui _glptr_glMultiTexCoordP3ui

typedef void (GL_APIENTRY *PFN_glTexCoordP4uiv)(GLenum type, const GLuint * coords);
extern PFN_glTexCoordP4uiv _glptr_glTexCoordP4uiv;
#define glTexCoordP4uiv _glptr_glTexCoordP4uiv

typedef void (GL_APIENTRY *PFN_glTexCoordP4ui)(GLenum type, GLuint coords);
extern PFN_glTexCoordP4ui _glptr_glTexCoordP4ui;
#define glTexCoordP4ui _glptr_glTexCoordP4ui

typedef void (GL_APIENTRY *PFN_glTexCoordP1uiv)(GLenum type, const GLuint * coords);
extern PFN_glTexCoordP1uiv _glptr_glTexCoordP1uiv;
#define glTexCoordP1uiv _glptr_glTexCoordP1uiv

typedef void (GL_APIENTRY *PFN_glTexCoordP1ui)(GLenum type, GLuint coords);
extern PFN_glTexCoordP1ui _glptr_glTexCoordP1ui;
#define glTexCoordP1ui _glptr_glTexCoordP1ui

typedef void (GL_APIENTRY *PFN_glVertexP4uiv)(GLenum type, const GLuint * value);
extern PFN_glVertexP4uiv _glptr_glVertexP4uiv;
#define glVertexP4uiv _glptr_glVertexP4uiv

typedef void (GL_APIENTRY *PFN_glVertexP4ui)(GLenum type, GLuint value);
extern PFN_glVertexP4ui _glptr_glVertexP4ui;
#define glVertexP4ui _glptr_glVertexP4ui

typedef void (GL_APIENTRY *PFN_glVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFN_glVertexAttribP4ui _glptr_glVertexAttribP4ui;
#define glVertexAttribP4ui _glptr_glVertexAttribP4ui

typedef void (GL_APIENTRY *PFN_glVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFN_glVertexAttribP3uiv _glptr_glVertexAttribP3uiv;
#define glVertexAttribP3uiv _glptr_glVertexAttribP3uiv

typedef void (GL_APIENTRY *PFN_glVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFN_glVertexAttribP3ui _glptr_glVertexAttribP3ui;
#define glVertexAttribP3ui _glptr_glVertexAttribP3ui

typedef void (GL_APIENTRY *PFN_glVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFN_glVertexAttribP2ui _glptr_glVertexAttribP2ui;
#define glVertexAttribP2ui _glptr_glVertexAttribP2ui

typedef void (GL_APIENTRY *PFN_glGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 * params);
extern PFN_glGetQueryObjectui64v _glptr_glGetQueryObjectui64v;
#define glGetQueryObjectui64v _glptr_glGetQueryObjectui64v

typedef void (GL_APIENTRY *PFN_glQueryCounter)(GLuint id, GLenum target);
extern PFN_glQueryCounter _glptr_glQueryCounter;
#define glQueryCounter _glptr_glQueryCounter

typedef void (GL_APIENTRY *PFN_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint * params);
extern PFN_glGetSamplerParameterIuiv _glptr_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv _glptr_glGetSamplerParameterIuiv

typedef void (GL_APIENTRY *PFN_glVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFN_glVertexAttribP2uiv _glptr_glVertexAttribP2uiv;
#define glVertexAttribP2uiv _glptr_glVertexAttribP2uiv

typedef void (GL_APIENTRY *PFN_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat * params);
extern PFN_glGetSamplerParameterfv _glptr_glGetSamplerParameterfv;
#define glGetSamplerParameterfv _glptr_glGetSamplerParameterfv

typedef void (GL_APIENTRY *PFN_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint * params);
extern PFN_glGetSamplerParameterIiv _glptr_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv _glptr_glGetSamplerParameterIiv

typedef void (GL_APIENTRY *PFN_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint * params);
extern PFN_glGetSamplerParameteriv _glptr_glGetSamplerParameteriv;
#define glGetSamplerParameteriv _glptr_glGetSamplerParameteriv

typedef void (GL_APIENTRY *PFN_glDeleteSamplers)(GLsizei count, const GLuint * samplers);
extern PFN_glDeleteSamplers _glptr_glDeleteSamplers;
#define glDeleteSamplers _glptr_glDeleteSamplers

typedef void (GL_APIENTRY *PFN_glGenSamplers)(GLsizei count, GLuint * samplers);
extern PFN_glGenSamplers _glptr_glGenSamplers;
#define glGenSamplers _glptr_glGenSamplers

typedef void (GL_APIENTRY *PFN_glSampleMaski)(GLuint maskNumber, GLbitfield mask);
extern PFN_glSampleMaski _glptr_glSampleMaski;
#define glSampleMaski _glptr_glSampleMaski

typedef void (GL_APIENTRY *PFN_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
extern PFN_glFramebufferTexture _glptr_glFramebufferTexture;
#define glFramebufferTexture _glptr_glFramebufferTexture

typedef void (GL_APIENTRY *PFN_glGetInteger64i_v)(GLenum target, GLuint index, GLint64 * data);
extern PFN_glGetInteger64i_v _glptr_glGetInteger64i_v;
#define glGetInteger64i_v _glptr_glGetInteger64i_v

typedef void (GL_APIENTRY *PFN_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint * param);
extern PFN_glSamplerParameterIiv _glptr_glSamplerParameterIiv;
#define glSamplerParameterIiv _glptr_glSamplerParameterIiv

typedef void (GL_APIENTRY *PFN_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 * params);
extern PFN_glGetBufferParameteri64v _glptr_glGetBufferParameteri64v;
#define glGetBufferParameteri64v _glptr_glGetBufferParameteri64v

typedef void (GL_APIENTRY *PFN_glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
extern PFN_glGetSynciv _glptr_glGetSynciv;
#define glGetSynciv _glptr_glGetSynciv

typedef void (GL_APIENTRY *PFN_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFN_glWaitSync _glptr_glWaitSync;
#define glWaitSync _glptr_glWaitSync

typedef void (GL_APIENTRY *PFN_glDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect);
extern PFN_glDrawElementsIndirect _glptr_glDrawElementsIndirect;
#define glDrawElementsIndirect _glptr_glDrawElementsIndirect

typedef GLint (GL_APIENTRY *PFN_glGetFragDataIndex)(GLuint program, const GLchar * name);
extern PFN_glGetFragDataIndex _glptr_glGetFragDataIndex;
#define glGetFragDataIndex _glptr_glGetFragDataIndex

typedef GLenum (GL_APIENTRY *PFN_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFN_glClientWaitSync _glptr_glClientWaitSync;
#define glClientWaitSync _glptr_glClientWaitSync

typedef void (GL_APIENTRY *PFN_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
extern PFN_glDrawElementsBaseVertex _glptr_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex _glptr_glDrawElementsBaseVertex

typedef void (GL_APIENTRY *PFN_glGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
extern PFN_glGetActiveUniformName _glptr_glGetActiveUniformName;
#define glGetActiveUniformName _glptr_glGetActiveUniformName

typedef void (GL_APIENTRY *PFN_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
extern PFN_glTexBuffer _glptr_glTexBuffer;
#define glTexBuffer _glptr_glTexBuffer

typedef void (GL_APIENTRY *PFN_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern PFN_glDrawArraysInstanced _glptr_glDrawArraysInstanced;
#define glDrawArraysInstanced _glptr_glDrawArraysInstanced

typedef void (GL_APIENTRY *PFN_glDeleteVertexArrays)(GLsizei n, const GLuint * arrays);
extern PFN_glDeleteVertexArrays _glptr_glDeleteVertexArrays;
#define glDeleteVertexArrays _glptr_glDeleteVertexArrays

typedef void (GL_APIENTRY *PFN_glBeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
extern PFN_glBeginQueryIndexed _glptr_glBeginQueryIndexed;
#define glBeginQueryIndexed _glptr_glBeginQueryIndexed

typedef void (GL_APIENTRY *PFN_glTexCoordP2uiv)(GLenum type, const GLuint * coords);
extern PFN_glTexCoordP2uiv _glptr_glTexCoordP2uiv;
#define glTexCoordP2uiv _glptr_glTexCoordP2uiv

typedef void (GL_APIENTRY *PFN_glBindVertexArray)(GLuint array);
extern PFN_glBindVertexArray _glptr_glBindVertexArray;
#define glBindVertexArray _glptr_glBindVertexArray

typedef void * (GL_APIENTRY *PFN_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFN_glMapBufferRange _glptr_glMapBufferRange;
#define glMapBufferRange _glptr_glMapBufferRange

typedef void (GL_APIENTRY *PFN_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFN_glFramebufferTextureLayer _glptr_glFramebufferTextureLayer;
#define glFramebufferTextureLayer _glptr_glFramebufferTextureLayer

typedef void (GL_APIENTRY *PFN_glMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
extern PFN_glMultiDrawElementsBaseVertex _glptr_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex _glptr_glMultiDrawElementsBaseVertex

typedef void (GL_APIENTRY *PFN_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFN_glRenderbufferStorageMultisample _glptr_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample _glptr_glRenderbufferStorageMultisample

typedef void (GL_APIENTRY *PFN_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFN_glBlitFramebuffer _glptr_glBlitFramebuffer;
#define glBlitFramebuffer _glptr_glBlitFramebuffer

typedef void (GL_APIENTRY *PFN_glColorP4uiv)(GLenum type, const GLuint * color);
extern PFN_glColorP4uiv _glptr_glColorP4uiv;
#define glColorP4uiv _glptr_glColorP4uiv

typedef void (GL_APIENTRY *PFN_glGenerateMipmap)(GLenum target);
extern PFN_glGenerateMipmap _glptr_glGenerateMipmap;
#define glGenerateMipmap _glptr_glGenerateMipmap

typedef void (GL_APIENTRY *PFN_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
extern PFN_glGetFramebufferAttachmentParameteriv _glptr_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv _glptr_glGetFramebufferAttachmentParameteriv

typedef void (GL_APIENTRY *PFN_glMinSampleShading)(GLfloat value);
extern PFN_glMinSampleShading _glptr_glMinSampleShading;
#define glMinSampleShading _glptr_glMinSampleShading

typedef void (GL_APIENTRY *PFN_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFN_glFramebufferRenderbuffer _glptr_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer _glptr_glFramebufferRenderbuffer

typedef void (GL_APIENTRY *PFN_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFN_glCopyBufferSubData _glptr_glCopyBufferSubData;
#define glCopyBufferSubData _glptr_glCopyBufferSubData

typedef void (GL_APIENTRY *PFN_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFN_glFramebufferTexture2D _glptr_glFramebufferTexture2D;
#define glFramebufferTexture2D _glptr_glFramebufferTexture2D

typedef GLenum (GL_APIENTRY *PFN_glCheckFramebufferStatus)(GLenum target);
extern PFN_glCheckFramebufferStatus _glptr_glCheckFramebufferStatus;
#define glCheckFramebufferStatus _glptr_glCheckFramebufferStatus

typedef void (GL_APIENTRY *PFN_glGenFramebuffers)(GLsizei n, GLuint * framebuffers);
extern PFN_glGenFramebuffers _glptr_glGenFramebuffers;
#define glGenFramebuffers _glptr_glGenFramebuffers

typedef void (GL_APIENTRY *PFN_glBindFramebuffer)(GLenum target, GLuint framebuffer);
extern PFN_glBindFramebuffer _glptr_glBindFramebuffer;
#define glBindFramebuffer _glptr_glBindFramebuffer

typedef GLboolean (GL_APIENTRY *PFN_glIsFramebuffer)(GLuint framebuffer);
extern PFN_glIsFramebuffer _glptr_glIsFramebuffer;
#define glIsFramebuffer _glptr_glIsFramebuffer

typedef void (GL_APIENTRY *PFN_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFN_glRenderbufferStorage _glptr_glRenderbufferStorage;
#define glRenderbufferStorage _glptr_glRenderbufferStorage

typedef void (GL_APIENTRY *PFN_glDeleteRenderbuffers)(GLsizei n, const GLuint * renderbuffers);
extern PFN_glDeleteRenderbuffers _glptr_glDeleteRenderbuffers;
#define glDeleteRenderbuffers _glptr_glDeleteRenderbuffers

typedef void (GL_APIENTRY *PFN_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
extern PFN_glBindRenderbuffer _glptr_glBindRenderbuffer;
#define glBindRenderbuffer _glptr_glBindRenderbuffer

typedef GLboolean (GL_APIENTRY *PFN_glIsRenderbuffer)(GLuint renderbuffer);
extern PFN_glIsRenderbuffer _glptr_glIsRenderbuffer;
#define glIsRenderbuffer _glptr_glIsRenderbuffer

typedef void (GL_APIENTRY *PFN_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
extern PFN_glClearBufferfv _glptr_glClearBufferfv;
#define glClearBufferfv _glptr_glClearBufferfv

typedef void (GL_APIENTRY *PFN_glVertexP3ui)(GLenum type, GLuint value);
extern PFN_glVertexP3ui _glptr_glVertexP3ui;
#define glVertexP3ui _glptr_glVertexP3ui

typedef void (GL_APIENTRY *PFN_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetTexParameterIiv _glptr_glGetTexParameterIiv;
#define glGetTexParameterIiv _glptr_glGetTexParameterIiv

typedef void (GL_APIENTRY *PFN_glColorP4ui)(GLenum type, GLuint color);
extern PFN_glColorP4ui _glptr_glColorP4ui;
#define glColorP4ui _glptr_glColorP4ui

typedef void (GL_APIENTRY *PFN_glTexParameterIiv)(GLenum target, GLenum pname, const GLint * params);
extern PFN_glTexParameterIiv _glptr_glTexParameterIiv;
#define glTexParameterIiv _glptr_glTexParameterIiv

typedef void (GL_APIENTRY *PFN_glUniform4uiv)(GLint location, GLsizei count, const GLuint * value);
extern PFN_glUniform4uiv _glptr_glUniform4uiv;
#define glUniform4uiv _glptr_glUniform4uiv

typedef void (GL_APIENTRY *PFN_glGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint * params);
extern PFN_glGetUniformSubroutineuiv _glptr_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv _glptr_glGetUniformSubroutineuiv

typedef void (GL_APIENTRY *PFN_glUniform3uiv)(GLint location, GLsizei count, const GLuint * value);
extern PFN_glUniform3uiv _glptr_glUniform3uiv;
#define glUniform3uiv _glptr_glUniform3uiv

typedef void (GL_APIENTRY *PFN_glUniform2uiv)(GLint location, GLsizei count, const GLuint * value);
extern PFN_glUniform2uiv _glptr_glUniform2uiv;
#define glUniform2uiv _glptr_glUniform2uiv

typedef void (GL_APIENTRY *PFN_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
extern PFN_glGetActiveUniformBlockiv _glptr_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv _glptr_glGetActiveUniformBlockiv

typedef void (GL_APIENTRY *PFN_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFN_glUniform3ui _glptr_glUniform3ui;
#define glUniform3ui _glptr_glUniform3ui

typedef void (GL_APIENTRY *PFN_glUniform2ui)(GLint location, GLuint v0, GLuint v1);
extern PFN_glUniform2ui _glptr_glUniform2ui;
#define glUniform2ui _glptr_glUniform2ui

typedef void (GL_APIENTRY *PFN_glUniform1ui)(GLint location, GLuint v0);
extern PFN_glUniform1ui _glptr_glUniform1ui;
#define glUniform1ui _glptr_glUniform1ui

typedef void (GL_APIENTRY *PFN_glVertexAttribI4ubv)(GLuint index, const GLubyte * v);
extern PFN_glVertexAttribI4ubv _glptr_glVertexAttribI4ubv;
#define glVertexAttribI4ubv _glptr_glVertexAttribI4ubv

typedef void (GL_APIENTRY *PFN_glVertexAttribI4sv)(GLuint index, const GLshort * v);
extern PFN_glVertexAttribI4sv _glptr_glVertexAttribI4sv;
#define glVertexAttribI4sv _glptr_glVertexAttribI4sv

typedef void (GL_APIENTRY *PFN_glVertexAttribI4bv)(GLuint index, const GLbyte * v);
extern PFN_glVertexAttribI4bv _glptr_glVertexAttribI4bv;
#define glVertexAttribI4bv _glptr_glVertexAttribI4bv

typedef void (GL_APIENTRY *PFN_glVertexAttribI4iv)(GLuint index, const GLint * v);
extern PFN_glVertexAttribI4iv _glptr_glVertexAttribI4iv;
#define glVertexAttribI4iv _glptr_glVertexAttribI4iv

typedef void (GL_APIENTRY *PFN_glVertexAttribI3iv)(GLuint index, const GLint * v);
extern PFN_glVertexAttribI3iv _glptr_glVertexAttribI3iv;
#define glVertexAttribI3iv _glptr_glVertexAttribI3iv

typedef void (GL_APIENTRY *PFN_glVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
extern PFN_glVertexAttribI3ui _glptr_glVertexAttribI3ui;
#define glVertexAttribI3ui _glptr_glVertexAttribI3ui

typedef void (GL_APIENTRY *PFN_glVertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
extern PFN_glVertexAttribI2ui _glptr_glVertexAttribI2ui;
#define glVertexAttribI2ui _glptr_glVertexAttribI2ui

typedef void (GL_APIENTRY *PFN_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
extern PFN_glVertexAttribI4i _glptr_glVertexAttribI4i;
#define glVertexAttribI4i _glptr_glVertexAttribI4i

typedef void (GL_APIENTRY *PFN_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern PFN_glBlendFuncSeparatei _glptr_glBlendFuncSeparatei;
#define glBlendFuncSeparatei _glptr_glBlendFuncSeparatei

typedef void (GL_APIENTRY *PFN_glVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
extern PFN_glVertexAttribI3i _glptr_glVertexAttribI3i;
#define glVertexAttribI3i _glptr_glVertexAttribI3i

typedef void (GL_APIENTRY *PFN_glVertexAttribI2i)(GLuint index, GLint x, GLint y);
extern PFN_glVertexAttribI2i _glptr_glVertexAttribI2i;
#define glVertexAttribI2i _glptr_glVertexAttribI2i

typedef void (GL_APIENTRY *PFN_glVertexAttribI1i)(GLuint index, GLint x);
extern PFN_glVertexAttribI1i _glptr_glVertexAttribI1i;
#define glVertexAttribI1i _glptr_glVertexAttribI1i

typedef void (GL_APIENTRY *PFN_glVertexAttribI1iv)(GLuint index, const GLint * v);
extern PFN_glVertexAttribI1iv _glptr_glVertexAttribI1iv;
#define glVertexAttribI1iv _glptr_glVertexAttribI1iv

typedef void (GL_APIENTRY *PFN_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint * params);
extern PFN_glGetVertexAttribIuiv _glptr_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv _glptr_glGetVertexAttribIuiv

typedef void (GL_APIENTRY *PFN_glDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
extern PFN_glDrawTransformFeedbackStream _glptr_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream _glptr_glDrawTransformFeedbackStream

typedef void (GL_APIENTRY *PFN_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFN_glVertexAttribIPointer _glptr_glVertexAttribIPointer;
#define glVertexAttribIPointer _glptr_glVertexAttribIPointer

typedef void (GL_APIENTRY *PFN_glClampColor)(GLenum target, GLenum clamp);
extern PFN_glClampColor _glptr_glClampColor;
#define glClampColor _glptr_glClampColor

typedef void (GL_APIENTRY *PFN_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
extern PFN_glGetTransformFeedbackVarying _glptr_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying _glptr_glGetTransformFeedbackVarying

typedef void (GL_APIENTRY *PFN_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
extern PFN_glTransformFeedbackVaryings _glptr_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings _glptr_glTransformFeedbackVaryings

typedef void (GL_APIENTRY *PFN_glBeginTransformFeedback)(GLenum primitiveMode);
extern PFN_glBeginTransformFeedback _glptr_glBeginTransformFeedback;
#define glBeginTransformFeedback _glptr_glBeginTransformFeedback

typedef void (GL_APIENTRY *PFN_glDisablei)(GLenum target, GLuint index);
extern PFN_glDisablei _glptr_glDisablei;
#define glDisablei _glptr_glDisablei

typedef void (GL_APIENTRY *PFN_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetRenderbufferParameteriv _glptr_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv _glptr_glGetRenderbufferParameteriv

typedef void (GL_APIENTRY *PFN_glGetBooleani_v)(GLenum target, GLuint index, GLboolean * data);
extern PFN_glGetBooleani_v _glptr_glGetBooleani_v;
#define glGetBooleani_v _glptr_glGetBooleani_v

typedef void (GL_APIENTRY *PFN_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern PFN_glColorMaski _glptr_glColorMaski;
#define glColorMaski _glptr_glColorMaski

typedef void (GL_APIENTRY *PFN_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix4x3fv _glptr_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv _glptr_glUniformMatrix4x3fv

typedef void (GL_APIENTRY *PFN_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix3x2fv _glptr_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv _glptr_glUniformMatrix3x2fv

typedef void (GL_APIENTRY *PFN_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix2x3fv _glptr_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv _glptr_glUniformMatrix2x3fv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4usv)(GLuint index, const GLushort * v);
extern PFN_glVertexAttrib4usv _glptr_glVertexAttrib4usv;
#define glVertexAttrib4usv _glptr_glVertexAttrib4usv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4ubv)(GLuint index, const GLubyte * v);
extern PFN_glVertexAttrib4ubv _glptr_glVertexAttrib4ubv;
#define glVertexAttrib4ubv _glptr_glVertexAttrib4ubv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4sv)(GLuint index, const GLshort * v);
extern PFN_glVertexAttrib4sv _glptr_glVertexAttrib4sv;
#define glVertexAttrib4sv _glptr_glVertexAttrib4sv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern PFN_glVertexAttrib4s _glptr_glVertexAttrib4s;
#define glVertexAttrib4s _glptr_glVertexAttrib4s

typedef void (GL_APIENTRY *PFN_glVertexAttrib4iv)(GLuint index, const GLint * v);
extern PFN_glVertexAttrib4iv _glptr_glVertexAttrib4iv;
#define glVertexAttrib4iv _glptr_glVertexAttrib4iv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFN_glVertexAttrib4f _glptr_glVertexAttrib4f;
#define glVertexAttrib4f _glptr_glVertexAttrib4f

typedef void (GL_APIENTRY *PFN_glVertexAttrib4dv)(GLuint index, const GLdouble * v);
extern PFN_glVertexAttrib4dv _glptr_glVertexAttrib4dv;
#define glVertexAttrib4dv _glptr_glVertexAttrib4dv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFN_glVertexAttrib4d _glptr_glVertexAttrib4d;
#define glVertexAttrib4d _glptr_glVertexAttrib4d

typedef void (GL_APIENTRY *PFN_glTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFN_glTexImage3DMultisample _glptr_glTexImage3DMultisample;
#define glTexImage3DMultisample _glptr_glTexImage3DMultisample

typedef void (GL_APIENTRY *PFN_glVertexAttrib4bv)(GLuint index, const GLbyte * v);
extern PFN_glVertexAttrib4bv _glptr_glVertexAttrib4bv;
#define glVertexAttrib4bv _glptr_glVertexAttrib4bv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Nusv)(GLuint index, const GLushort * v);
extern PFN_glVertexAttrib4Nusv _glptr_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv _glptr_glVertexAttrib4Nusv

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords);
extern PFN_glMultiTexCoordP1ui _glptr_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui _glptr_glMultiTexCoordP1ui

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Nuiv)(GLuint index, const GLuint * v);
extern PFN_glVertexAttrib4Nuiv _glptr_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv _glptr_glVertexAttrib4Nuiv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern PFN_glVertexAttrib4Nub _glptr_glVertexAttrib4Nub;
#define glVertexAttrib4Nub _glptr_glVertexAttrib4Nub

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Niv)(GLuint index, const GLint * v);
extern PFN_glVertexAttrib4Niv _glptr_glVertexAttrib4Niv;
#define glVertexAttrib4Niv _glptr_glVertexAttrib4Niv

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Nbv)(GLuint index, const GLbyte * v);
extern PFN_glVertexAttrib4Nbv _glptr_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv _glptr_glVertexAttrib4Nbv

typedef void (GL_APIENTRY *PFN_glVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
extern PFN_glVertexAttrib3s _glptr_glVertexAttrib3s;
#define glVertexAttrib3s _glptr_glVertexAttrib3s

typedef void (GL_APIENTRY *PFN_glVertexAttrib3fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib3fv _glptr_glVertexAttrib3fv;
#define glVertexAttrib3fv _glptr_glVertexAttrib3fv

typedef void (GL_APIENTRY *PFN_glVertexAttrib3dv)(GLuint index, const GLdouble * v);
extern PFN_glVertexAttrib3dv _glptr_glVertexAttrib3dv;
#define glVertexAttrib3dv _glptr_glVertexAttrib3dv

typedef void (GL_APIENTRY *PFN_glVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFN_glVertexAttrib3d _glptr_glVertexAttrib3d;
#define glVertexAttrib3d _glptr_glVertexAttrib3d

typedef void (GL_APIENTRY *PFN_glVertexAttrib2sv)(GLuint index, const GLshort * v);
extern PFN_glVertexAttrib2sv _glptr_glVertexAttrib2sv;
#define glVertexAttrib2sv _glptr_glVertexAttrib2sv

typedef void (GL_APIENTRY *PFN_glVertexAttrib2s)(GLuint index, GLshort x, GLshort y);
extern PFN_glVertexAttrib2s _glptr_glVertexAttrib2s;
#define glVertexAttrib2s _glptr_glVertexAttrib2s

typedef void (GL_APIENTRY *PFN_glVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
extern PFN_glVertexAttrib2d _glptr_glVertexAttrib2d;
#define glVertexAttrib2d _glptr_glVertexAttrib2d

typedef void (GL_APIENTRY *PFN_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
extern PFN_glFlushMappedBufferRange _glptr_glFlushMappedBufferRange;
#define glFlushMappedBufferRange _glptr_glFlushMappedBufferRange

typedef GLboolean (GL_APIENTRY *PFN_glIsEnabledi)(GLenum target, GLuint index);
extern PFN_glIsEnabledi _glptr_glIsEnabledi;
#define glIsEnabledi _glptr_glIsEnabledi

typedef void (GL_APIENTRY *PFN_glVertexAttrib1sv)(GLuint index, const GLshort * v);
extern PFN_glVertexAttrib1sv _glptr_glVertexAttrib1sv;
#define glVertexAttrib1sv _glptr_glVertexAttrib1sv

typedef void (GL_APIENTRY *PFN_glVertexAttrib1f)(GLuint index, GLfloat x);
extern PFN_glVertexAttrib1f _glptr_glVertexAttrib1f;
#define glVertexAttrib1f _glptr_glVertexAttrib1f

typedef void (GL_APIENTRY *PFN_glVertexAttrib1d)(GLuint index, GLdouble x);
extern PFN_glVertexAttrib1d _glptr_glVertexAttrib1d;
#define glVertexAttrib1d _glptr_glVertexAttrib1d

typedef void (GL_APIENTRY *PFN_glValidateProgram)(GLuint program);
extern PFN_glValidateProgram _glptr_glValidateProgram;
#define glValidateProgram _glptr_glValidateProgram

typedef void (GL_APIENTRY *PFN_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix4fv _glptr_glUniformMatrix4fv;
#define glUniformMatrix4fv _glptr_glUniformMatrix4fv

typedef void (GL_APIENTRY *PFN_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix3fv _glptr_glUniformMatrix3fv;
#define glUniformMatrix3fv _glptr_glUniformMatrix3fv

typedef void (GL_APIENTRY *PFN_glUniform3iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform3iv _glptr_glUniform3iv;
#define glUniform3iv _glptr_glUniform3iv

typedef void (GL_APIENTRY *PFN_glUniform1iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform1iv _glptr_glUniform1iv;
#define glUniform1iv _glptr_glUniform1iv

typedef void (GL_APIENTRY *PFN_glUniform3fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform3fv _glptr_glUniform3fv;
#define glUniform3fv _glptr_glUniform3fv

typedef void (GL_APIENTRY *PFN_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFN_glUniform4i _glptr_glUniform4i;
#define glUniform4i _glptr_glUniform4i

typedef void (GL_APIENTRY *PFN_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
extern PFN_glUniform3i _glptr_glUniform3i;
#define glUniform3i _glptr_glUniform3i

typedef void (GL_APIENTRY *PFN_glUniform2i)(GLint location, GLint v0, GLint v1);
extern PFN_glUniform2i _glptr_glUniform2i;
#define glUniform2i _glptr_glUniform2i

typedef void (GL_APIENTRY *PFN_glBindFragDataLocation)(GLuint program, GLuint color, const GLchar * name);
extern PFN_glBindFragDataLocation _glptr_glBindFragDataLocation;
#define glBindFragDataLocation _glptr_glBindFragDataLocation

typedef void (GL_APIENTRY *PFN_glUniform1i)(GLint location, GLint v0);
extern PFN_glUniform1i _glptr_glUniform1i;
#define glUniform1i _glptr_glUniform1i

typedef void (GL_APIENTRY *PFN_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFN_glUniform4f _glptr_glUniform4f;
#define glUniform4f _glptr_glUniform4f

typedef void (GL_APIENTRY *PFN_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFN_glUniform3f _glptr_glUniform3f;
#define glUniform3f _glptr_glUniform3f

typedef GLuint (GL_APIENTRY *PFN_glGetUniformBlockIndex)(GLuint program, const GLchar * uniformBlockName);
extern PFN_glGetUniformBlockIndex _glptr_glGetUniformBlockIndex;
#define glGetUniformBlockIndex _glptr_glGetUniformBlockIndex

typedef void (GL_APIENTRY *PFN_glLinkProgram)(GLuint program);
extern PFN_glLinkProgram _glptr_glLinkProgram;
#define glLinkProgram _glptr_glLinkProgram

typedef void (GL_APIENTRY *PFN_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void ** pointer);
extern PFN_glGetVertexAttribPointerv _glptr_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv _glptr_glGetVertexAttribPointerv

typedef void (GL_APIENTRY *PFN_glVertexAttribI2uiv)(GLuint index, const GLuint * v);
extern PFN_glVertexAttribI2uiv _glptr_glVertexAttribI2uiv;
#define glVertexAttribI2uiv _glptr_glVertexAttribI2uiv

typedef void (GL_APIENTRY *PFN_glGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble * params);
extern PFN_glGetVertexAttribdv _glptr_glGetVertexAttribdv;
#define glGetVertexAttribdv _glptr_glGetVertexAttribdv

typedef void (GL_APIENTRY *PFN_glVertexAttrib3sv)(GLuint index, const GLshort * v);
extern PFN_glVertexAttrib3sv _glptr_glVertexAttrib3sv;
#define glVertexAttrib3sv _glptr_glVertexAttrib3sv

typedef void (GL_APIENTRY *PFN_glGetUniformiv)(GLuint program, GLint location, GLint * params);
extern PFN_glGetUniformiv _glptr_glGetUniformiv;
#define glGetUniformiv _glptr_glGetUniformiv

typedef void (GL_APIENTRY *PFN_glGetUniformfv)(GLuint program, GLint location, GLfloat * params);
extern PFN_glGetUniformfv _glptr_glGetUniformfv;
#define glGetUniformfv _glptr_glGetUniformfv

typedef void (GL_APIENTRY *PFN_glGenRenderbuffers)(GLsizei n, GLuint * renderbuffers);
extern PFN_glGenRenderbuffers _glptr_glGenRenderbuffers;
#define glGenRenderbuffers _glptr_glGenRenderbuffers

typedef GLint (GL_APIENTRY *PFN_glGetUniformLocation)(GLuint program, const GLchar * name);
extern PFN_glGetUniformLocation _glptr_glGetUniformLocation;
#define glGetUniformLocation _glptr_glGetUniformLocation

typedef void (GL_APIENTRY *PFN_glGetProgramiv)(GLuint program, GLenum pname, GLint * params);
extern PFN_glGetProgramiv _glptr_glGetProgramiv;
#define glGetProgramiv _glptr_glGetProgramiv

typedef GLint (GL_APIENTRY *PFN_glGetAttribLocation)(GLuint program, const GLchar * name);
extern PFN_glGetAttribLocation _glptr_glGetAttribLocation;
#define glGetAttribLocation _glptr_glGetAttribLocation

typedef void (GL_APIENTRY *PFN_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
extern PFN_glGetAttachedShaders _glptr_glGetAttachedShaders;
#define glGetAttachedShaders _glptr_glGetAttachedShaders

typedef void (GL_APIENTRY *PFN_glDeleteProgram)(GLuint program);
extern PFN_glDeleteProgram _glptr_glDeleteProgram;
#define glDeleteProgram _glptr_glDeleteProgram

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Nsv)(GLuint index, const GLshort * v);
extern PFN_glVertexAttrib4Nsv _glptr_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv _glptr_glVertexAttrib4Nsv

typedef GLuint (GL_APIENTRY *PFN_glCreateShader)(GLenum type);
extern PFN_glCreateShader _glptr_glCreateShader;
#define glCreateShader _glptr_glCreateShader

typedef GLuint (GL_APIENTRY *PFN_glCreateProgram)();
extern PFN_glCreateProgram _glptr_glCreateProgram;
#define glCreateProgram _glptr_glCreateProgram

typedef void (GL_APIENTRY *PFN_glCompileShader)(GLuint shader);
extern PFN_glCompileShader _glptr_glCompileShader;
#define glCompileShader _glptr_glCompileShader

typedef void (GL_APIENTRY *PFN_glBeginConditionalRender)(GLuint id, GLenum mode);
extern PFN_glBeginConditionalRender _glptr_glBeginConditionalRender;
#define glBeginConditionalRender _glptr_glBeginConditionalRender

typedef void (GL_APIENTRY *PFN_glBindAttribLocation)(GLuint program, GLuint index, const GLchar * name);
extern PFN_glBindAttribLocation _glptr_glBindAttribLocation;
#define glBindAttribLocation _glptr_glBindAttribLocation

typedef void (GL_APIENTRY *PFN_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint * param);
extern PFN_glSamplerParameterIuiv _glptr_glSamplerParameterIuiv;
#define glSamplerParameterIuiv _glptr_glSamplerParameterIuiv

typedef void (GL_APIENTRY *PFN_glAttachShader)(GLuint program, GLuint shader);
extern PFN_glAttachShader _glptr_glAttachShader;
#define glAttachShader _glptr_glAttachShader

typedef void (GL_APIENTRY *PFN_glDeleteSync)(GLsync sync);
extern PFN_glDeleteSync _glptr_glDeleteSync;
#define glDeleteSync _glptr_glDeleteSync

typedef void (GL_APIENTRY *PFN_glDrawBuffers)(GLsizei n, const GLenum * bufs);
extern PFN_glDrawBuffers _glptr_glDrawBuffers;
#define glDrawBuffers _glptr_glDrawBuffers

typedef void (GL_APIENTRY *PFN_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
extern PFN_glBlendEquationSeparate _glptr_glBlendEquationSeparate;
#define glBlendEquationSeparate _glptr_glBlendEquationSeparate

typedef void (GL_APIENTRY *PFN_glGetBufferPointerv)(GLenum target, GLenum pname, void ** params);
extern PFN_glGetBufferPointerv _glptr_glGetBufferPointerv;
#define glGetBufferPointerv _glptr_glGetBufferPointerv

typedef GLboolean (GL_APIENTRY *PFN_glUnmapBuffer)(GLenum target);
extern PFN_glUnmapBuffer _glptr_glUnmapBuffer;
#define glUnmapBuffer _glptr_glUnmapBuffer

typedef void (GL_APIENTRY *PFN_glEnablei)(GLenum target, GLuint index);
extern PFN_glEnablei _glptr_glEnablei;
#define glEnablei _glptr_glEnablei

typedef void * (GL_APIENTRY *PFN_glMapBuffer)(GLenum target, GLenum access);
extern PFN_glMapBuffer _glptr_glMapBuffer;
#define glMapBuffer _glptr_glMapBuffer

typedef void (GL_APIENTRY *PFN_glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
extern PFN_glBufferData _glptr_glBufferData;
#define glBufferData _glptr_glBufferData

typedef GLboolean (GL_APIENTRY *PFN_glIsBuffer)(GLuint buffer);
extern PFN_glIsBuffer _glptr_glIsBuffer;
#define glIsBuffer _glptr_glIsBuffer

typedef void (GL_APIENTRY *PFN_glGenBuffers)(GLsizei n, GLuint * buffers);
extern PFN_glGenBuffers _glptr_glGenBuffers;
#define glGenBuffers _glptr_glGenBuffers

typedef void (GL_APIENTRY *PFN_glBindBuffer)(GLenum target, GLuint buffer);
extern PFN_glBindBuffer _glptr_glBindBuffer;
#define glBindBuffer _glptr_glBindBuffer

typedef void (GL_APIENTRY *PFN_glEndQuery)(GLenum target);
extern PFN_glEndQuery _glptr_glEndQuery;
#define glEndQuery _glptr_glEndQuery

typedef void (GL_APIENTRY *PFN_glBeginQuery)(GLenum target, GLuint id);
extern PFN_glBeginQuery _glptr_glBeginQuery;
#define glBeginQuery _glptr_glBeginQuery

typedef GLboolean (GL_APIENTRY *PFN_glIsQuery)(GLuint id);
extern PFN_glIsQuery _glptr_glIsQuery;
#define glIsQuery _glptr_glIsQuery

typedef void (GL_APIENTRY *PFN_glGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
extern PFN_glGetActiveSubroutineUniformName _glptr_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName _glptr_glGetActiveSubroutineUniformName

typedef void (GL_APIENTRY *PFN_glVertexAttrib4Nubv)(GLuint index, const GLubyte * v);
extern PFN_glVertexAttrib4Nubv _glptr_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv _glptr_glVertexAttrib4Nubv

typedef void (GL_APIENTRY *PFN_glDeleteQueries)(GLsizei n, const GLuint * ids);
extern PFN_glDeleteQueries _glptr_glDeleteQueries;
#define glDeleteQueries _glptr_glDeleteQueries

typedef void (GL_APIENTRY *PFN_glVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFN_glVertexAttribP1ui _glptr_glVertexAttribP1ui;
#define glVertexAttribP1ui _glptr_glVertexAttribP1ui

typedef void (GL_APIENTRY *PFN_glGenQueries)(GLsizei n, GLuint * ids);
extern PFN_glGenQueries _glptr_glGenQueries;
#define glGenQueries _glptr_glGenQueries

typedef void (GL_APIENTRY *PFN_glBlendEquation)(GLenum mode);
extern PFN_glBlendEquation _glptr_glBlendEquation;
#define glBlendEquation _glptr_glBlendEquation

typedef void (GL_APIENTRY *PFN_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFN_glBlendColor _glptr_glBlendColor;
#define glBlendColor _glptr_glBlendColor

typedef void (GL_APIENTRY *PFN_glWindowPos3iv)(const GLint * v);
extern PFN_glWindowPos3iv _glptr_glWindowPos3iv;
#define glWindowPos3iv _glptr_glWindowPos3iv

typedef void (GL_APIENTRY *PFN_glWindowPos3dv)(const GLdouble * v);
extern PFN_glWindowPos3dv _glptr_glWindowPos3dv;
#define glWindowPos3dv _glptr_glWindowPos3dv

typedef void (GL_APIENTRY *PFN_glPrimitiveRestartIndex)(GLuint index);
extern PFN_glPrimitiveRestartIndex _glptr_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex _glptr_glPrimitiveRestartIndex

typedef void (GL_APIENTRY *PFN_glUniform1f)(GLint location, GLfloat v0);
extern PFN_glUniform1f _glptr_glUniform1f;
#define glUniform1f _glptr_glUniform1f

typedef void (GL_APIENTRY *PFN_glWindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
extern PFN_glWindowPos3d _glptr_glWindowPos3d;
#define glWindowPos3d _glptr_glWindowPos3d

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint * coords);
extern PFN_glMultiTexCoordP1uiv _glptr_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv _glptr_glMultiTexCoordP1uiv

typedef void (GL_APIENTRY *PFN_glWindowPos2sv)(const GLshort * v);
extern PFN_glWindowPos2sv _glptr_glWindowPos2sv;
#define glWindowPos2sv _glptr_glWindowPos2sv

typedef void (GL_APIENTRY *PFN_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
extern PFN_glGetActiveUniformBlockName _glptr_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName _glptr_glGetActiveUniformBlockName

typedef void (GL_APIENTRY *PFN_glWindowPos2s)(GLshort x, GLshort y);
extern PFN_glWindowPos2s _glptr_glWindowPos2s;
#define glWindowPos2s _glptr_glWindowPos2s

typedef void (GL_APIENTRY *PFN_glWindowPos2iv)(const GLint * v);
extern PFN_glWindowPos2iv _glptr_glWindowPos2iv;
#define glWindowPos2iv _glptr_glWindowPos2iv

typedef void (GL_APIENTRY *PFN_glWindowPos2fv)(const GLfloat * v);
extern PFN_glWindowPos2fv _glptr_glWindowPos2fv;
#define glWindowPos2fv _glptr_glWindowPos2fv

typedef void (GL_APIENTRY *PFN_glWindowPos2f)(GLfloat x, GLfloat y);
extern PFN_glWindowPos2f _glptr_glWindowPos2f;
#define glWindowPos2f _glptr_glWindowPos2f

typedef void (GL_APIENTRY *PFN_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern PFN_glUniformBlockBinding _glptr_glUniformBlockBinding;
#define glUniformBlockBinding _glptr_glUniformBlockBinding

typedef void (GL_APIENTRY *PFN_glWindowPos2dv)(const GLdouble * v);
extern PFN_glWindowPos2dv _glptr_glWindowPos2dv;
#define glWindowPos2dv _glptr_glWindowPos2dv

typedef void (GL_APIENTRY *PFN_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix2fv _glptr_glUniformMatrix2fv;
#define glUniformMatrix2fv _glptr_glUniformMatrix2fv

typedef void (GL_APIENTRY *PFN_glSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFN_glSecondaryColorPointer _glptr_glSecondaryColorPointer;
#define glSecondaryColorPointer _glptr_glSecondaryColorPointer

typedef void (GL_APIENTRY *PFN_glSecondaryColor3usv)(const GLushort * v);
extern PFN_glSecondaryColor3usv _glptr_glSecondaryColor3usv;
#define glSecondaryColor3usv _glptr_glSecondaryColor3usv

typedef void (GL_APIENTRY *PFN_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFN_glGetProgramInfoLog _glptr_glGetProgramInfoLog;
#define glGetProgramInfoLog _glptr_glGetProgramInfoLog

typedef void (GL_APIENTRY *PFN_glSecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
extern PFN_glSecondaryColor3us _glptr_glSecondaryColor3us;
#define glSecondaryColor3us _glptr_glSecondaryColor3us

typedef void (GL_APIENTRY *PFN_glSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
extern PFN_glSecondaryColor3ui _glptr_glSecondaryColor3ui;
#define glSecondaryColor3ui _glptr_glSecondaryColor3ui

typedef void (GL_APIENTRY *PFN_glWindowPos3sv)(const GLshort * v);
extern PFN_glWindowPos3sv _glptr_glWindowPos3sv;
#define glWindowPos3sv _glptr_glWindowPos3sv

typedef void (GL_APIENTRY *PFN_glSecondaryColor3ubv)(const GLubyte * v);
extern PFN_glSecondaryColor3ubv _glptr_glSecondaryColor3ubv;
#define glSecondaryColor3ubv _glptr_glSecondaryColor3ubv

typedef void (GL_APIENTRY *PFN_glSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
extern PFN_glSecondaryColor3ub _glptr_glSecondaryColor3ub;
#define glSecondaryColor3ub _glptr_glSecondaryColor3ub

typedef void (GL_APIENTRY *PFN_glVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
extern PFN_glVertex4s _glptr_glVertex4s;
#define glVertex4s _glptr_glVertex4s

typedef GLboolean (GL_APIENTRY *PFN_glIsShader)(GLuint shader);
extern PFN_glIsShader _glptr_glIsShader;
#define glIsShader _glptr_glIsShader

typedef void (GL_APIENTRY *PFN_glVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFN_glVertex4f _glptr_glVertex4f;
#define glVertex4f _glptr_glVertex4f

typedef void (GL_APIENTRY *PFN_glIndexd)(GLdouble c);
extern PFN_glIndexd _glptr_glIndexd;
#define glIndexd _glptr_glIndexd

typedef void (GL_APIENTRY *PFN_glTexCoordP3uiv)(GLenum type, const GLuint * coords);
extern PFN_glTexCoordP3uiv _glptr_glTexCoordP3uiv;
#define glTexCoordP3uiv _glptr_glTexCoordP3uiv

typedef void (GL_APIENTRY *PFN_glVertex4i)(GLint x, GLint y, GLint z, GLint w);
extern PFN_glVertex4i _glptr_glVertex4i;
#define glVertex4i _glptr_glVertex4i

typedef void (GL_APIENTRY *PFN_glVertex3sv)(const GLshort * v);
extern PFN_glVertex3sv _glptr_glVertex3sv;
#define glVertex3sv _glptr_glVertex3sv

typedef void (GL_APIENTRY *PFN_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFN_glColorPointer _glptr_glColorPointer;
#define glColorPointer _glptr_glColorPointer

typedef void (GL_APIENTRY *PFN_glGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint * params);
extern PFN_glGetQueryIndexediv _glptr_glGetQueryIndexediv;
#define glGetQueryIndexediv _glptr_glGetQueryIndexediv

typedef void (GL_APIENTRY *PFN_glVertex3s)(GLshort x, GLshort y, GLshort z);
extern PFN_glVertex3s _glptr_glVertex3s;
#define glVertex3s _glptr_glVertex3s

typedef void (GL_APIENTRY *PFN_glUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint * indices);
extern PFN_glUniformSubroutinesuiv _glptr_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv _glptr_glUniformSubroutinesuiv

typedef void (GL_APIENTRY *PFN_glVertex4sv)(const GLshort * v);
extern PFN_glVertex4sv _glptr_glVertex4sv;
#define glVertex4sv _glptr_glVertex4sv

typedef void (GL_APIENTRY *PFN_glVertex2f)(GLfloat x, GLfloat y);
extern PFN_glVertex2f _glptr_glVertex2f;
#define glVertex2f _glptr_glVertex2f

typedef void (GL_APIENTRY *PFN_glGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
extern PFN_glGetActiveSubroutineUniformiv _glptr_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv _glptr_glGetActiveSubroutineUniformiv

typedef void (GL_APIENTRY *PFN_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
extern PFN_glSamplerParameteri _glptr_glSamplerParameteri;
#define glSamplerParameteri _glptr_glSamplerParameteri

typedef void (GL_APIENTRY *PFN_glVertex2dv)(const GLdouble * v);
extern PFN_glVertex2dv _glptr_glVertex2dv;
#define glVertex2dv _glptr_glVertex2dv

typedef GLboolean (GL_APIENTRY *PFN_glIsSync)(GLsync sync);
extern PFN_glIsSync _glptr_glIsSync;
#define glIsSync _glptr_glIsSync

typedef void (GL_APIENTRY *PFN_glColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
extern PFN_glColor4s _glptr_glColor4s;
#define glColor4s _glptr_glColor4s

typedef void (GL_APIENTRY *PFN_glTexCoord4sv)(const GLshort * v);
extern PFN_glTexCoord4sv _glptr_glTexCoord4sv;
#define glTexCoord4sv _glptr_glTexCoord4sv

typedef void (GL_APIENTRY *PFN_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint * params);
extern PFN_glGetVertexAttribiv _glptr_glGetVertexAttribiv;
#define glGetVertexAttribiv _glptr_glGetVertexAttribiv

typedef void (GL_APIENTRY *PFN_glVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFN_glVertex4d _glptr_glVertex4d;
#define glVertex4d _glptr_glVertex4d

typedef void (GL_APIENTRY *PFN_glVertex4iv)(const GLint * v);
extern PFN_glVertex4iv _glptr_glVertex4iv;
#define glVertex4iv _glptr_glVertex4iv

typedef void (GL_APIENTRY *PFN_glLoadTransposeMatrixf)(const GLfloat * m);
extern PFN_glLoadTransposeMatrixf _glptr_glLoadTransposeMatrixf;
#define glLoadTransposeMatrixf _glptr_glLoadTransposeMatrixf

typedef void (GL_APIENTRY *PFN_glGetIntegeri_v)(GLenum target, GLuint index, GLint * data);
extern PFN_glGetIntegeri_v _glptr_glGetIntegeri_v;
#define glGetIntegeri_v _glptr_glGetIntegeri_v

typedef void (GL_APIENTRY *PFN_glEvalCoord2fv)(const GLfloat * u);
extern PFN_glEvalCoord2fv _glptr_glEvalCoord2fv;
#define glEvalCoord2fv _glptr_glEvalCoord2fv

typedef void (GL_APIENTRY *PFN_glMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
extern PFN_glMap2d _glptr_glMap2d;
#define glMap2d _glptr_glMap2d

typedef void (GL_APIENTRY *PFN_glTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern PFN_glTexCoord4f _glptr_glTexCoord4f;
#define glTexCoord4f _glptr_glTexCoord4f

typedef void (GL_APIENTRY *PFN_glDepthMask)(GLboolean flag);
extern PFN_glDepthMask _glptr_glDepthMask;
#define glDepthMask _glptr_glDepthMask

typedef void (GL_APIENTRY *PFN_glTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern PFN_glTexCoord4d _glptr_glTexCoord4d;
#define glTexCoord4d _glptr_glTexCoord4d

typedef void (GL_APIENTRY *PFN_glVertex3d)(GLdouble x, GLdouble y, GLdouble z);
extern PFN_glVertex3d _glptr_glVertex3d;
#define glVertex3d _glptr_glVertex3d

typedef void (GL_APIENTRY *PFN_glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFN_glFramebufferTexture1D _glptr_glFramebufferTexture1D;
#define glFramebufferTexture1D _glptr_glFramebufferTexture1D

typedef void (GL_APIENTRY *PFN_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
extern PFN_glVertexAttribPointer _glptr_glVertexAttribPointer;
#define glVertexAttribPointer _glptr_glVertexAttribPointer

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1fv)(GLenum target, const GLfloat * v);
extern PFN_glMultiTexCoord1fv _glptr_glMultiTexCoord1fv;
#define glMultiTexCoord1fv _glptr_glMultiTexCoord1fv

typedef void (GL_APIENTRY *PFN_glTexCoord3iv)(const GLint * v);
extern PFN_glTexCoord3iv _glptr_glTexCoord3iv;
#define glTexCoord3iv _glptr_glTexCoord3iv

typedef void (GL_APIENTRY *PFN_glTexCoord3fv)(const GLfloat * v);
extern PFN_glTexCoord3fv _glptr_glTexCoord3fv;
#define glTexCoord3fv _glptr_glTexCoord3fv

typedef void (GL_APIENTRY *PFN_glTexCoord3dv)(const GLdouble * v);
extern PFN_glTexCoord3dv _glptr_glTexCoord3dv;
#define glTexCoord3dv _glptr_glTexCoord3dv

typedef void (GL_APIENTRY *PFN_glTexCoord2sv)(const GLshort * v);
extern PFN_glTexCoord2sv _glptr_glTexCoord2sv;
#define glTexCoord2sv _glptr_glTexCoord2sv

typedef void (GL_APIENTRY *PFN_glTexCoord2fv)(const GLfloat * v);
extern PFN_glTexCoord2fv _glptr_glTexCoord2fv;
#define glTexCoord2fv _glptr_glTexCoord2fv

typedef void (GL_APIENTRY *PFN_glTexCoord2f)(GLfloat s, GLfloat t);
extern PFN_glTexCoord2f _glptr_glTexCoord2f;
#define glTexCoord2f _glptr_glTexCoord2f

typedef void (GL_APIENTRY *PFN_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFN_glBindBufferRange _glptr_glBindBufferRange;
#define glBindBufferRange _glptr_glBindBufferRange

typedef void (GL_APIENTRY *PFN_glTexCoord2dv)(const GLdouble * v);
extern PFN_glTexCoord2dv _glptr_glTexCoord2dv;
#define glTexCoord2dv _glptr_glTexCoord2dv

typedef void (GL_APIENTRY *PFN_glTexCoord1iv)(const GLint * v);
extern PFN_glTexCoord1iv _glptr_glTexCoord1iv;
#define glTexCoord1iv _glptr_glTexCoord1iv

typedef void (GL_APIENTRY *PFN_glWindowPos3i)(GLint x, GLint y, GLint z);
extern PFN_glWindowPos3i _glptr_glWindowPos3i;
#define glWindowPos3i _glptr_glWindowPos3i

typedef GLboolean (GL_APIENTRY *PFN_glIsEnabled)(GLenum cap);
extern PFN_glIsEnabled _glptr_glIsEnabled;
#define glIsEnabled _glptr_glIsEnabled

typedef void (GL_APIENTRY *PFN_glColorP3ui)(GLenum type, GLuint color);
extern PFN_glColorP3ui _glptr_glColorP3ui;
#define glColorP3ui _glptr_glColorP3ui

typedef void (GL_APIENTRY *PFN_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
extern PFN_glTexParameterf _glptr_glTexParameterf;
#define glTexParameterf _glptr_glTexParameterf

typedef void (GL_APIENTRY *PFN_glTexCoord4i)(GLint s, GLint t, GLint r, GLint q);
extern PFN_glTexCoord4i _glptr_glTexCoord4i;
#define glTexCoord4i _glptr_glTexCoord4i

typedef void (GL_APIENTRY *PFN_glTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexSubImage1D _glptr_glTexSubImage1D;
#define glTexSubImage1D _glptr_glTexSubImage1D

typedef void (GL_APIENTRY *PFN_glTexCoord1fv)(const GLfloat * v);
extern PFN_glTexCoord1fv _glptr_glTexCoord1fv;
#define glTexCoord1fv _glptr_glTexCoord1fv

typedef void (GL_APIENTRY *PFN_glEvalPoint1)(GLint i);
extern PFN_glEvalPoint1 _glptr_glEvalPoint1;
#define glEvalPoint1 _glptr_glEvalPoint1

typedef void (GL_APIENTRY *PFN_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFN_glBlendFuncSeparate _glptr_glBlendFuncSeparate;
#define glBlendFuncSeparate _glptr_glBlendFuncSeparate

typedef void (GL_APIENTRY *PFN_glTexCoord1f)(GLfloat s);
extern PFN_glTexCoord1f _glptr_glTexCoord1f;
#define glTexCoord1f _glptr_glTexCoord1f

typedef void (GL_APIENTRY *PFN_glNormalPointer)(GLenum type, GLsizei stride, const void * pointer);
extern PFN_glNormalPointer _glptr_glNormalPointer;
#define glNormalPointer _glptr_glNormalPointer

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1sv)(GLenum target, const GLshort * v);
extern PFN_glMultiTexCoord1sv _glptr_glMultiTexCoord1sv;
#define glMultiTexCoord1sv _glptr_glMultiTexCoord1sv

typedef void (GL_APIENTRY *PFN_glRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
extern PFN_glRectf _glptr_glRectf;
#define glRectf _glptr_glRectf

typedef GLsync (GL_APIENTRY *PFN_glFenceSync)(GLenum condition, GLbitfield flags);
extern PFN_glFenceSync _glptr_glFenceSync;
#define glFenceSync _glptr_glFenceSync

typedef void (GL_APIENTRY *PFN_glTexCoord1i)(GLint s);
extern PFN_glTexCoord1i _glptr_glTexCoord1i;
#define glTexCoord1i _glptr_glTexCoord1i

typedef void (GL_APIENTRY *PFN_glUniform2dv)(GLint location, GLsizei count, const GLdouble * value);
extern PFN_glUniform2dv _glptr_glUniform2dv;
#define glUniform2dv _glptr_glUniform2dv

typedef void (GL_APIENTRY *PFN_glRasterPos4i)(GLint x, GLint y, GLint z, GLint w);
extern PFN_glRasterPos4i _glptr_glRasterPos4i;
#define glRasterPos4i _glptr_glRasterPos4i

typedef void (GL_APIENTRY *PFN_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFN_glGetShaderInfoLog _glptr_glGetShaderInfoLog;
#define glGetShaderInfoLog _glptr_glGetShaderInfoLog

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2i)(GLenum target, GLint s, GLint t);
extern PFN_glMultiTexCoord2i _glptr_glMultiTexCoord2i;
#define glMultiTexCoord2i _glptr_glMultiTexCoord2i

typedef void (GL_APIENTRY *PFN_glRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFN_glRasterPos4f _glptr_glRasterPos4f;
#define glRasterPos4f _glptr_glRasterPos4f

typedef void (GL_APIENTRY *PFN_glTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFN_glTexImage2DMultisample _glptr_glTexImage2DMultisample;
#define glTexImage2DMultisample _glptr_glTexImage2DMultisample

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
extern PFN_glMultiTexCoord3d _glptr_glMultiTexCoord3d;
#define glMultiTexCoord3d _glptr_glMultiTexCoord3d

typedef void (GL_APIENTRY *PFN_glRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
extern PFN_glRectd _glptr_glRectd;
#define glRectd _glptr_glRectd

typedef void (GL_APIENTRY *PFN_glBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
extern PFN_glBindFragDataLocationIndexed _glptr_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed _glptr_glBindFragDataLocationIndexed

typedef void (GL_APIENTRY *PFN_glVertexAttrib1fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib1fv _glptr_glVertexAttrib1fv;
#define glVertexAttrib1fv _glptr_glVertexAttrib1fv

typedef void (GL_APIENTRY *PFN_glDepthRange)(GLdouble n, GLdouble f);
extern PFN_glDepthRange _glptr_glDepthRange;
#define glDepthRange _glptr_glDepthRange

typedef void (GL_APIENTRY *PFN_glRasterPos3sv)(const GLshort * v);
extern PFN_glRasterPos3sv _glptr_glRasterPos3sv;
#define glRasterPos3sv _glptr_glRasterPos3sv

typedef void (GL_APIENTRY *PFN_glRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
extern PFN_glRects _glptr_glRects;
#define glRects _glptr_glRects

typedef void (GL_APIENTRY *PFN_glPointParameterf)(GLenum pname, GLfloat param);
extern PFN_glPointParameterf _glptr_glPointParameterf;
#define glPointParameterf _glptr_glPointParameterf

typedef void (GL_APIENTRY *PFN_glRasterPos3s)(GLshort x, GLshort y, GLshort z);
extern PFN_glRasterPos3s _glptr_glRasterPos3s;
#define glRasterPos3s _glptr_glRasterPos3s

typedef void (GL_APIENTRY *PFN_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFN_glUniform4ui _glptr_glUniform4ui;
#define glUniform4ui _glptr_glUniform4ui

typedef void (GL_APIENTRY *PFN_glRectdv)(const GLdouble * v1, const GLdouble * v2);
extern PFN_glRectdv _glptr_glRectdv;
#define glRectdv _glptr_glRectdv

typedef void (GL_APIENTRY *PFN_glTexCoord1s)(GLshort s);
extern PFN_glTexCoord1s _glptr_glTexCoord1s;
#define glTexCoord1s _glptr_glTexCoord1s

typedef void (GL_APIENTRY *PFN_glColor4sv)(const GLshort * v);
extern PFN_glColor4sv _glptr_glColor4sv;
#define glColor4sv _glptr_glColor4sv

typedef void (GL_APIENTRY *PFN_glProvokingVertex)(GLenum mode);
extern PFN_glProvokingVertex _glptr_glProvokingVertex;
#define glProvokingVertex _glptr_glProvokingVertex

typedef void (GL_APIENTRY *PFN_glVertexAttribI1ui)(GLuint index, GLuint x);
extern PFN_glVertexAttribI1ui _glptr_glVertexAttribI1ui;
#define glVertexAttribI1ui _glptr_glVertexAttribI1ui

typedef GLboolean (GL_APIENTRY *PFN_glIsProgram)(GLuint program);
extern PFN_glIsProgram _glptr_glIsProgram;
#define glIsProgram _glptr_glIsProgram

typedef void (GL_APIENTRY *PFN_glDeleteTextures)(GLsizei n, const GLuint * textures);
extern PFN_glDeleteTextures _glptr_glDeleteTextures;
#define glDeleteTextures _glptr_glDeleteTextures

typedef void (GL_APIENTRY *PFN_glGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 * params);
extern PFN_glGetQueryObjecti64v _glptr_glGetQueryObjecti64v;
#define glGetQueryObjecti64v _glptr_glGetQueryObjecti64v

typedef void (GL_APIENTRY *PFN_glGetQueryiv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetQueryiv _glptr_glGetQueryiv;
#define glGetQueryiv _glptr_glGetQueryiv

typedef void (GL_APIENTRY *PFN_glTexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
extern PFN_glTexCoord3f _glptr_glTexCoord3f;
#define glTexCoord3f _glptr_glTexCoord3f

typedef void (GL_APIENTRY *PFN_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFN_glStencilOpSeparate _glptr_glStencilOpSeparate;
#define glStencilOpSeparate _glptr_glStencilOpSeparate

typedef void (GL_APIENTRY *PFN_glTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
extern PFN_glTexCoord4s _glptr_glTexCoord4s;
#define glTexCoord4s _glptr_glTexCoord4s

typedef void (GL_APIENTRY *PFN_glRasterPos3i)(GLint x, GLint y, GLint z);
extern PFN_glRasterPos3i _glptr_glRasterPos3i;
#define glRasterPos3i _glptr_glRasterPos3i

typedef void (GL_APIENTRY *PFN_glVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFN_glVertexAttribP1uiv _glptr_glVertexAttribP1uiv;
#define glVertexAttribP1uiv _glptr_glVertexAttribP1uiv

typedef void (GL_APIENTRY *PFN_glLoadTransposeMatrixd)(const GLdouble * m);
extern PFN_glLoadTransposeMatrixd _glptr_glLoadTransposeMatrixd;
#define glLoadTransposeMatrixd _glptr_glLoadTransposeMatrixd

typedef void (GL_APIENTRY *PFN_glRasterPos3fv)(const GLfloat * v);
extern PFN_glRasterPos3fv _glptr_glRasterPos3fv;
#define glRasterPos3fv _glptr_glRasterPos3fv

typedef void (GL_APIENTRY *PFN_glRasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
extern PFN_glRasterPos3f _glptr_glRasterPos3f;
#define glRasterPos3f _glptr_glRasterPos3f

typedef void (GL_APIENTRY *PFN_glUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix4dv _glptr_glUniformMatrix4dv;
#define glUniformMatrix4dv _glptr_glUniformMatrix4dv

typedef void (GL_APIENTRY *PFN_glRasterPos2sv)(const GLshort * v);
extern PFN_glRasterPos2sv _glptr_glRasterPos2sv;
#define glRasterPos2sv _glptr_glRasterPos2sv

typedef void (GL_APIENTRY *PFN_glTexCoord2s)(GLshort s, GLshort t);
extern PFN_glTexCoord2s _glptr_glTexCoord2s;
#define glTexCoord2s _glptr_glTexCoord2s

typedef void (GL_APIENTRY *PFN_glVertex3dv)(const GLdouble * v);
extern PFN_glVertex3dv _glptr_glVertex3dv;
#define glVertex3dv _glptr_glVertex3dv

typedef void (GL_APIENTRY *PFN_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
extern PFN_glReadPixels _glptr_glReadPixels;
#define glReadPixels _glptr_glReadPixels

typedef void (GL_APIENTRY *PFN_glFogCoordfv)(const GLfloat * coord);
extern PFN_glFogCoordfv _glptr_glFogCoordfv;
#define glFogCoordfv _glptr_glFogCoordfv

typedef void (GL_APIENTRY *PFN_glRasterPos2i)(GLint x, GLint y);
extern PFN_glRasterPos2i _glptr_glRasterPos2i;
#define glRasterPos2i _glptr_glRasterPos2i

typedef void (GL_APIENTRY *PFN_glDisableVertexAttribArray)(GLuint index);
extern PFN_glDisableVertexAttribArray _glptr_glDisableVertexAttribArray;
#define glDisableVertexAttribArray _glptr_glDisableVertexAttribArray

typedef void (GL_APIENTRY *PFN_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFN_glColorMask _glptr_glColorMask;
#define glColorMask _glptr_glColorMask

typedef void (GL_APIENTRY *PFN_glColor3usv)(const GLushort * v);
extern PFN_glColor3usv _glptr_glColor3usv;
#define glColor3usv _glptr_glColor3usv

typedef void (GL_APIENTRY *PFN_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
extern PFN_glGetActiveUniformsiv _glptr_glGetActiveUniformsiv;
#define glGetActiveUniformsiv _glptr_glGetActiveUniformsiv

typedef void (GL_APIENTRY *PFN_glVertex2s)(GLshort x, GLshort y);
extern PFN_glVertex2s _glptr_glVertex2s;
#define glVertex2s _glptr_glVertex2s

typedef void (GL_APIENTRY *PFN_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat * param);
extern PFN_glSamplerParameterfv _glptr_glSamplerParameterfv;
#define glSamplerParameterfv _glptr_glSamplerParameterfv

typedef void (GL_APIENTRY *PFN_glGetInteger64v)(GLenum pname, GLint64 * data);
extern PFN_glGetInteger64v _glptr_glGetInteger64v;
#define glGetInteger64v _glptr_glGetInteger64v

typedef void (GL_APIENTRY *PFN_glTexCoord3i)(GLint s, GLint t, GLint r);
extern PFN_glTexCoord3i _glptr_glTexCoord3i;
#define glTexCoord3i _glptr_glTexCoord3i

typedef void (GL_APIENTRY *PFN_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFN_glStencilFuncSeparate _glptr_glStencilFuncSeparate;
#define glStencilFuncSeparate _glptr_glStencilFuncSeparate

typedef void (GL_APIENTRY *PFN_glLogicOp)(GLenum opcode);
extern PFN_glLogicOp _glptr_glLogicOp;
#define glLogicOp _glptr_glLogicOp

typedef void (GL_APIENTRY *PFN_glPolygonOffset)(GLfloat factor, GLfloat units);
extern PFN_glPolygonOffset _glptr_glPolygonOffset;
#define glPolygonOffset _glptr_glPolygonOffset

typedef void (GL_APIENTRY *PFN_glRasterPos4iv)(const GLint * v);
extern PFN_glRasterPos4iv _glptr_glRasterPos4iv;
#define glRasterPos4iv _glptr_glRasterPos4iv

typedef void (GL_APIENTRY *PFN_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetBufferParameteriv _glptr_glGetBufferParameteriv;
#define glGetBufferParameteriv _glptr_glGetBufferParameteriv

typedef void (GL_APIENTRY *PFN_glRasterPos2d)(GLdouble x, GLdouble y);
extern PFN_glRasterPos2d _glptr_glRasterPos2d;
#define glRasterPos2d _glptr_glRasterPos2d

typedef void (GL_APIENTRY *PFN_glNormal3s)(GLshort nx, GLshort ny, GLshort nz);
extern PFN_glNormal3s _glptr_glNormal3s;
#define glNormal3s _glptr_glNormal3s

typedef void (GL_APIENTRY *PFN_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint * value);
extern PFN_glClearBufferuiv _glptr_glClearBufferuiv;
#define glClearBufferuiv _glptr_glClearBufferuiv

typedef void (GL_APIENTRY *PFN_glNormal3fv)(const GLfloat * v);
extern PFN_glNormal3fv _glptr_glNormal3fv;
#define glNormal3fv _glptr_glNormal3fv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2fv)(GLenum target, const GLfloat * v);
extern PFN_glMultiTexCoord2fv _glptr_glMultiTexCoord2fv;
#define glMultiTexCoord2fv _glptr_glMultiTexCoord2fv

typedef void (GL_APIENTRY *PFN_glTexCoord1sv)(const GLshort * v);
extern PFN_glTexCoord1sv _glptr_glTexCoord1sv;
#define glTexCoord1sv _glptr_glTexCoord1sv

typedef void (GL_APIENTRY *PFN_glSecondaryColor3iv)(const GLint * v);
extern PFN_glSecondaryColor3iv _glptr_glSecondaryColor3iv;
#define glSecondaryColor3iv _glptr_glSecondaryColor3iv

typedef void (GL_APIENTRY *PFN_glVertex2sv)(const GLshort * v);
extern PFN_glVertex2sv _glptr_glVertex2sv;
#define glVertex2sv _glptr_glVertex2sv

typedef void (GL_APIENTRY *PFN_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
extern PFN_glGetShaderSource _glptr_glGetShaderSource;
#define glGetShaderSource _glptr_glGetShaderSource

typedef void (GL_APIENTRY *PFN_glColor3d)(GLdouble red, GLdouble green, GLdouble blue);
extern PFN_glColor3d _glptr_glColor3d;
#define glColor3d _glptr_glColor3d

typedef void (GL_APIENTRY *PFN_glNormalP3ui)(GLenum type, GLuint coords);
extern PFN_glNormalP3ui _glptr_glNormalP3ui;
#define glNormalP3ui _glptr_glNormalP3ui

typedef void (GL_APIENTRY *PFN_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params);
extern PFN_glGetVertexAttribfv _glptr_glGetVertexAttribfv;
#define glGetVertexAttribfv _glptr_glGetVertexAttribfv

typedef void (GL_APIENTRY *PFN_glNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
extern PFN_glNormal3d _glptr_glNormal3d;
#define glNormal3d _glptr_glNormal3d

typedef void (GL_APIENTRY *PFN_glTexCoord4iv)(const GLint * v);
extern PFN_glTexCoord4iv _glptr_glTexCoord4iv;
#define glTexCoord4iv _glptr_glTexCoord4iv

typedef void (GL_APIENTRY *PFN_glIndexsv)(const GLshort * c);
extern PFN_glIndexsv _glptr_glIndexsv;
#define glIndexsv _glptr_glIndexsv

typedef void (GL_APIENTRY *PFN_glColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
extern PFN_glColor4us _glptr_glColor4us;
#define glColor4us _glptr_glColor4us

typedef void (GL_APIENTRY *PFN_glGetMapiv)(GLenum target, GLenum query, GLint * v);
extern PFN_glGetMapiv _glptr_glGetMapiv;
#define glGetMapiv _glptr_glGetMapiv

typedef void (GL_APIENTRY *PFN_glIndexs)(GLshort c);
extern PFN_glIndexs _glptr_glIndexs;
#define glIndexs _glptr_glIndexs

typedef void (GL_APIENTRY *PFN_glIndexiv)(const GLint * c);
extern PFN_glIndexiv _glptr_glIndexiv;
#define glIndexiv _glptr_glIndexiv

typedef void (GL_APIENTRY *PFN_glVertex3f)(GLfloat x, GLfloat y, GLfloat z);
extern PFN_glVertex3f _glptr_glVertex3f;
#define glVertex3f _glptr_glVertex3f

typedef void (GL_APIENTRY *PFN_glTexCoord1dv)(const GLdouble * v);
extern PFN_glTexCoord1dv _glptr_glTexCoord1dv;
#define glTexCoord1dv _glptr_glTexCoord1dv

typedef void (GL_APIENTRY *PFN_glGetMapdv)(GLenum target, GLenum query, GLdouble * v);
extern PFN_glGetMapdv _glptr_glGetMapdv;
#define glGetMapdv _glptr_glGetMapdv

typedef void (GL_APIENTRY *PFN_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat * params);
extern PFN_glGetTexLevelParameterfv _glptr_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv _glptr_glGetTexLevelParameterfv

typedef void (GL_APIENTRY *PFN_glHint)(GLenum target, GLenum mode);
extern PFN_glHint _glptr_glHint;
#define glHint _glptr_glHint

typedef void (GL_APIENTRY *PFN_glUniform1uiv)(GLint location, GLsizei count, const GLuint * value);
extern PFN_glUniform1uiv _glptr_glUniform1uiv;
#define glUniform1uiv _glptr_glUniform1uiv

typedef GLboolean (GL_APIENTRY *PFN_glIsList)(GLuint list);
extern PFN_glIsList _glptr_glIsList;
#define glIsList _glptr_glIsList

typedef void (GL_APIENTRY *PFN_glTexGeni)(GLenum coord, GLenum pname, GLint param);
extern PFN_glTexGeni _glptr_glTexGeni;
#define glTexGeni _glptr_glTexGeni

typedef void (GL_APIENTRY *PFN_glGetQueryObjectiv)(GLuint id, GLenum pname, GLint * params);
extern PFN_glGetQueryObjectiv _glptr_glGetQueryObjectiv;
#define glGetQueryObjectiv _glptr_glGetQueryObjectiv

typedef void (GL_APIENTRY *PFN_glTexParameteri)(GLenum target, GLenum pname, GLint param);
extern PFN_glTexParameteri _glptr_glTexParameteri;
#define glTexParameteri _glptr_glTexParameteri

typedef void (GL_APIENTRY *PFN_glGetBooleanv)(GLenum pname, GLboolean * data);
extern PFN_glGetBooleanv _glptr_glGetBooleanv;
#define glGetBooleanv _glptr_glGetBooleanv

typedef void (GL_APIENTRY *PFN_glNormal3bv)(const GLbyte * v);
extern PFN_glNormal3bv _glptr_glNormal3bv;
#define glNormal3bv _glptr_glNormal3bv

typedef void (GL_APIENTRY *PFN_glVertexAttribI2iv)(GLuint index, const GLint * v);
extern PFN_glVertexAttribI2iv _glptr_glVertexAttribI2iv;
#define glVertexAttribI2iv _glptr_glVertexAttribI2iv

typedef void (GL_APIENTRY *PFN_glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
extern PFN_glGetBufferSubData _glptr_glGetBufferSubData;
#define glGetBufferSubData _glptr_glGetBufferSubData

typedef void (GL_APIENTRY *PFN_glRasterPos4fv)(const GLfloat * v);
extern PFN_glRasterPos4fv _glptr_glRasterPos4fv;
#define glRasterPos4fv _glptr_glRasterPos4fv

typedef void (GL_APIENTRY *PFN_glFogi)(GLenum pname, GLint param);
extern PFN_glFogi _glptr_glFogi;
#define glFogi _glptr_glFogi

typedef void (GL_APIENTRY *PFN_glReadBuffer)(GLenum src);
extern PFN_glReadBuffer _glptr_glReadBuffer;
#define glReadBuffer _glptr_glReadBuffer

typedef void (GL_APIENTRY *PFN_glUniform2iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform2iv _glptr_glUniform2iv;
#define glUniform2iv _glptr_glUniform2iv

typedef void (GL_APIENTRY *PFN_glMaterialfv)(GLenum face, GLenum pname, const GLfloat * params);
extern PFN_glMaterialfv _glptr_glMaterialfv;
#define glMaterialfv _glptr_glMaterialfv

typedef void (GL_APIENTRY *PFN_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
extern PFN_glStencilFunc _glptr_glStencilFunc;
#define glStencilFunc _glptr_glStencilFunc

typedef GLint (GL_APIENTRY *PFN_glRenderMode)(GLenum mode);
extern PFN_glRenderMode _glptr_glRenderMode;
#define glRenderMode _glptr_glRenderMode

typedef void (GL_APIENTRY *PFN_glVertex2fv)(const GLfloat * v);
extern PFN_glVertex2fv _glptr_glVertex2fv;
#define glVertex2fv _glptr_glVertex2fv

typedef void (GL_APIENTRY *PFN_glEvalCoord1fv)(const GLfloat * u);
extern PFN_glEvalCoord1fv _glptr_glEvalCoord1fv;
#define glEvalCoord1fv _glptr_glEvalCoord1fv

typedef void (GL_APIENTRY *PFN_glWindowPos2i)(GLint x, GLint y);
extern PFN_glWindowPos2i _glptr_glWindowPos2i;
#define glWindowPos2i _glptr_glWindowPos2i

typedef void (GL_APIENTRY *PFN_glTexCoord4dv)(const GLdouble * v);
extern PFN_glTexCoord4dv _glptr_glTexCoord4dv;
#define glTexCoord4dv _glptr_glTexCoord4dv

typedef void (GL_APIENTRY *PFN_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
extern PFN_glShaderSource _glptr_glShaderSource;
#define glShaderSource _glptr_glShaderSource

typedef void (GL_APIENTRY *PFN_glEnable)(GLenum cap);
extern PFN_glEnable _glptr_glEnable;
#define glEnable _glptr_glEnable

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
extern PFN_glMultiTexCoord2d _glptr_glMultiTexCoord2d;
#define glMultiTexCoord2d _glptr_glMultiTexCoord2d

typedef void (GL_APIENTRY *PFN_glVertexAttrib1dv)(GLuint index, const GLdouble * v);
extern PFN_glVertexAttrib1dv _glptr_glVertexAttrib1dv;
#define glVertexAttrib1dv _glptr_glVertexAttrib1dv

typedef void (GL_APIENTRY *PFN_glIndexi)(GLint c);
extern PFN_glIndexi _glptr_glIndexi;
#define glIndexi _glptr_glIndexi

typedef void (GL_APIENTRY *PFN_glRectiv)(const GLint * v1, const GLint * v2);
extern PFN_glRectiv _glptr_glRectiv;
#define glRectiv _glptr_glRectiv

typedef void (GL_APIENTRY *PFN_glDrawBuffer)(GLenum buf);
extern PFN_glDrawBuffer _glptr_glDrawBuffer;
#define glDrawBuffer _glptr_glDrawBuffer

typedef void (GL_APIENTRY *PFN_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glScissor _glptr_glScissor;
#define glScissor _glptr_glScissor

typedef void (GL_APIENTRY *PFN_glTexCoord3s)(GLshort s, GLshort t, GLshort r);
extern PFN_glTexCoord3s _glptr_glTexCoord3s;
#define glTexCoord3s _glptr_glTexCoord3s

typedef GLenum (GL_APIENTRY *PFN_glGetError)();
extern PFN_glGetError _glptr_glGetError;
#define glGetError _glptr_glGetError

typedef void (GL_APIENTRY *PFN_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
extern PFN_glDrawRangeElements _glptr_glDrawRangeElements;
#define glDrawRangeElements _glptr_glDrawRangeElements

typedef void (GL_APIENTRY *PFN_glVertexAttrib2dv)(GLuint index, const GLdouble * v);
extern PFN_glVertexAttrib2dv _glptr_glVertexAttrib2dv;
#define glVertexAttrib2dv _glptr_glVertexAttrib2dv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1iv)(GLenum target, const GLint * v);
extern PFN_glMultiTexCoord1iv _glptr_glMultiTexCoord1iv;
#define glMultiTexCoord1iv _glptr_glMultiTexCoord1iv

typedef void (GL_APIENTRY *PFN_glTexParameteriv)(GLenum target, GLenum pname, const GLint * params);
extern PFN_glTexParameteriv _glptr_glTexParameteriv;
#define glTexParameteriv _glptr_glTexParameteriv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
extern PFN_glMultiTexCoord4i _glptr_glMultiTexCoord4i;
#define glMultiTexCoord4i _glptr_glMultiTexCoord4i

typedef void (GL_APIENTRY *PFN_glClearDepth)(GLdouble depth);
extern PFN_glClearDepth _glptr_glClearDepth;
#define glClearDepth _glptr_glClearDepth

typedef void (GL_APIENTRY *PFN_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint * params);
extern PFN_glGetTexParameterIuiv _glptr_glGetTexParameterIuiv;
#define glGetTexParameterIuiv _glptr_glGetTexParameterIuiv

typedef void (GL_APIENTRY *PFN_glUniform2fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform2fv _glptr_glUniform2fv;
#define glUniform2fv _glptr_glUniform2fv

typedef void (GL_APIENTRY *PFN_glColor4bv)(const GLbyte * v);
extern PFN_glColor4bv _glptr_glColor4bv;
#define glColor4bv _glptr_glColor4bv

typedef void (GL_APIENTRY *PFN_glGetTexEnviv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetTexEnviv _glptr_glGetTexEnviv;
#define glGetTexEnviv _glptr_glGetTexEnviv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
extern PFN_glMultiTexCoord2s _glptr_glMultiTexCoord2s;
#define glMultiTexCoord2s _glptr_glMultiTexCoord2s

typedef void (GL_APIENTRY *PFN_glLineWidth)(GLfloat width);
extern PFN_glLineWidth _glptr_glLineWidth;
#define glLineWidth _glptr_glLineWidth

typedef void (GL_APIENTRY *PFN_glVertex3i)(GLint x, GLint y, GLint z);
extern PFN_glVertex3i _glptr_glVertex3i;
#define glVertex3i _glptr_glVertex3i

typedef void (GL_APIENTRY *PFN_glVertex2iv)(const GLint * v);
extern PFN_glVertex2iv _glptr_glVertex2iv;
#define glVertex2iv _glptr_glVertex2iv

typedef void (GL_APIENTRY *PFN_glBegin)(GLenum mode);
extern PFN_glBegin _glptr_glBegin;
#define glBegin _glptr_glBegin

typedef void (GL_APIENTRY *PFN_glPushMatrix)();
extern PFN_glPushMatrix _glptr_glPushMatrix;
#define glPushMatrix _glptr_glPushMatrix

typedef void (GL_APIENTRY *PFN_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
extern PFN_glNormal3f _glptr_glNormal3f;
#define glNormal3f _glptr_glNormal3f

typedef void (GL_APIENTRY *PFN_glPolygonStipple)(const GLubyte * mask);
extern PFN_glPolygonStipple _glptr_glPolygonStipple;
#define glPolygonStipple _glptr_glPolygonStipple

typedef void (GL_APIENTRY *PFN_glTexEnviv)(GLenum target, GLenum pname, const GLint * params);
extern PFN_glTexEnviv _glptr_glTexEnviv;
#define glTexEnviv _glptr_glTexEnviv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1i)(GLenum target, GLint s);
extern PFN_glMultiTexCoord1i _glptr_glMultiTexCoord1i;
#define glMultiTexCoord1i _glptr_glMultiTexCoord1i

typedef void (GL_APIENTRY *PFN_glNormal3iv)(const GLint * v);
extern PFN_glNormal3iv _glptr_glNormal3iv;
#define glNormal3iv _glptr_glNormal3iv

typedef void (GL_APIENTRY *PFN_glVertex4fv)(const GLfloat * v);
extern PFN_glVertex4fv _glptr_glVertex4fv;
#define glVertex4fv _glptr_glVertex4fv

typedef void (GL_APIENTRY *PFN_glCallList)(GLuint list);
extern PFN_glCallList _glptr_glCallList;
#define glCallList _glptr_glCallList

typedef void (GL_APIENTRY *PFN_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
extern PFN_glSamplerParameterf _glptr_glSamplerParameterf;
#define glSamplerParameterf _glptr_glSamplerParameterf

typedef void (GL_APIENTRY *PFN_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params);
extern PFN_glGetTexParameterfv _glptr_glGetTexParameterfv;
#define glGetTexParameterfv _glptr_glGetTexParameterfv

typedef void (GL_APIENTRY *PFN_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat * params);
extern PFN_glGetMaterialfv _glptr_glGetMaterialfv;
#define glGetMaterialfv _glptr_glGetMaterialfv

typedef void (GL_APIENTRY *PFN_glTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexImage1D _glptr_glTexImage1D;
#define glTexImage1D _glptr_glTexImage1D

typedef void (GL_APIENTRY *PFN_glNormal3sv)(const GLshort * v);
extern PFN_glNormal3sv _glptr_glNormal3sv;
#define glNormal3sv _glptr_glNormal3sv

typedef void (GL_APIENTRY *PFN_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
extern PFN_glBufferSubData _glptr_glBufferSubData;
#define glBufferSubData _glptr_glBufferSubData

typedef void (GL_APIENTRY *PFN_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint * params);
extern PFN_glGetTexLevelParameteriv _glptr_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv _glptr_glGetTexLevelParameteriv

typedef void (GL_APIENTRY *PFN_glLoadMatrixf)(const GLfloat * m);
extern PFN_glLoadMatrixf _glptr_glLoadMatrixf;
#define glLoadMatrixf _glptr_glLoadMatrixf

typedef void (GL_APIENTRY *PFN_glRasterPos3iv)(const GLint * v);
extern PFN_glRasterPos3iv _glptr_glRasterPos3iv;
#define glRasterPos3iv _glptr_glRasterPos3iv

typedef void (GL_APIENTRY *PFN_glCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexSubImage1D _glptr_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D _glptr_glCompressedTexSubImage1D

typedef void (GL_APIENTRY *PFN_glPopName)();
extern PFN_glPopName _glptr_glPopName;
#define glPopName _glptr_glPopName

typedef void (GL_APIENTRY *PFN_glTexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
extern PFN_glTexCoord3d _glptr_glTexCoord3d;
#define glTexCoord3d _glptr_glTexCoord3d

typedef void (GL_APIENTRY *PFN_glPixelStoref)(GLenum pname, GLfloat param);
extern PFN_glPixelStoref _glptr_glPixelStoref;
#define glPixelStoref _glptr_glPixelStoref

typedef void (GL_APIENTRY *PFN_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexImage2D _glptr_glTexImage2D;
#define glTexImage2D _glptr_glTexImage2D

typedef void (GL_APIENTRY *PFN_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern PFN_glVertexAttribI4ui _glptr_glVertexAttribI4ui;
#define glVertexAttribI4ui _glptr_glVertexAttribI4ui

typedef void (GL_APIENTRY *PFN_glColor3sv)(const GLshort * v);
extern PFN_glColor3sv _glptr_glColor3sv;
#define glColor3sv _glptr_glColor3sv

typedef void (GL_APIENTRY *PFN_glFlush)();
extern PFN_glFlush _glptr_glFlush;
#define glFlush _glptr_glFlush

typedef void (GL_APIENTRY *PFN_glEndTransformFeedback)();
extern PFN_glEndTransformFeedback _glptr_glEndTransformFeedback;
#define glEndTransformFeedback _glptr_glEndTransformFeedback

typedef void (GL_APIENTRY *PFN_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
extern PFN_glGetActiveAttrib _glptr_glGetActiveAttrib;
#define glGetActiveAttrib _glptr_glGetActiveAttrib

typedef const GLubyte  * (GL_APIENTRY *PFN_glGetString)(GLenum name);
extern PFN_glGetString _glptr_glGetString;
#define glGetString _glptr_glGetString

typedef void (GL_APIENTRY *PFN_glWindowPos3fv)(const GLfloat * v);
extern PFN_glWindowPos3fv _glptr_glWindowPos3fv;
#define glWindowPos3fv _glptr_glWindowPos3fv

typedef void (GL_APIENTRY *PFN_glColor3us)(GLushort red, GLushort green, GLushort blue);
extern PFN_glColor3us _glptr_glColor3us;
#define glColor3us _glptr_glColor3us

typedef void (GL_APIENTRY *PFN_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat * params);
extern PFN_glTexEnvfv _glptr_glTexEnvfv;
#define glTexEnvfv _glptr_glTexEnvfv

typedef void (GL_APIENTRY *PFN_glDeleteBuffers)(GLsizei n, const GLuint * buffers);
extern PFN_glDeleteBuffers _glptr_glDeleteBuffers;
#define glDeleteBuffers _glptr_glDeleteBuffers

typedef void (GL_APIENTRY *PFN_glVertex3iv)(const GLint * v);
extern PFN_glVertex3iv _glptr_glVertex3iv;
#define glVertex3iv _glptr_glVertex3iv

typedef void (GL_APIENTRY *PFN_glRasterPos2f)(GLfloat x, GLfloat y);
extern PFN_glRasterPos2f _glptr_glRasterPos2f;
#define glRasterPos2f _glptr_glRasterPos2f

typedef void (GL_APIENTRY *PFN_glTexCoord3sv)(const GLshort * v);
extern PFN_glTexCoord3sv _glptr_glTexCoord3sv;
#define glTexCoord3sv _glptr_glTexCoord3sv

typedef void (GL_APIENTRY *PFN_glGetTexGenfv)(GLenum coord, GLenum pname, GLfloat * params);
extern PFN_glGetTexGenfv _glptr_glGetTexGenfv;
#define glGetTexGenfv _glptr_glGetTexGenfv

typedef void (GL_APIENTRY *PFN_glColor3uiv)(const GLuint * v);
extern PFN_glColor3uiv _glptr_glColor3uiv;
#define glColor3uiv _glptr_glColor3uiv

typedef void (GL_APIENTRY *PFN_glFinish)();
extern PFN_glFinish _glptr_glFinish;
#define glFinish _glptr_glFinish

typedef void (GL_APIENTRY *PFN_glMultTransposeMatrixd)(const GLdouble * m);
extern PFN_glMultTransposeMatrixd _glptr_glMultTransposeMatrixd;
#define glMultTransposeMatrixd _glptr_glMultTransposeMatrixd

typedef GLuint (GL_APIENTRY *PFN_glGenLists)(GLsizei range);
extern PFN_glGenLists _glptr_glGenLists;
#define glGenLists _glptr_glGenLists

typedef void (GL_APIENTRY *PFN_glClipPlane)(GLenum plane, const GLdouble * equation);
extern PFN_glClipPlane _glptr_glClipPlane;
#define glClipPlane _glptr_glClipPlane

typedef void (GL_APIENTRY *PFN_glBlendFunc)(GLenum sfactor, GLenum dfactor);
extern PFN_glBlendFunc _glptr_glBlendFunc;
#define glBlendFunc _glptr_glBlendFunc

typedef void (GL_APIENTRY *PFN_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
extern PFN_glUniform2f _glptr_glUniform2f;
#define glUniform2f _glptr_glUniform2f

typedef void (GL_APIENTRY *PFN_glRasterPos4sv)(const GLshort * v);
extern PFN_glRasterPos4sv _glptr_glRasterPos4sv;
#define glRasterPos4sv _glptr_glRasterPos4sv

typedef void (GL_APIENTRY *PFN_glDisable)(GLenum cap);
extern PFN_glDisable _glptr_glDisable;
#define glDisable _glptr_glDisable

typedef void (GL_APIENTRY *PFN_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glViewport _glptr_glViewport;
#define glViewport _glptr_glViewport

typedef void (GL_APIENTRY *PFN_glIndexdv)(const GLdouble * c);
extern PFN_glIndexdv _glptr_glIndexdv;
#define glIndexdv _glptr_glIndexdv

typedef void (GL_APIENTRY *PFN_glEndList)();
extern PFN_glEndList _glptr_glEndList;
#define glEndList _glptr_glEndList

typedef void (GL_APIENTRY *PFN_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
extern PFN_glBindBufferBase _glptr_glBindBufferBase;
#define glBindBufferBase _glptr_glBindBufferBase

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1f)(GLenum target, GLfloat s);
extern PFN_glMultiTexCoord1f _glptr_glMultiTexCoord1f;
#define glMultiTexCoord1f _glptr_glMultiTexCoord1f

typedef void (GL_APIENTRY *PFN_glCallLists)(GLsizei n, GLenum type, const void * lists);
extern PFN_glCallLists _glptr_glCallLists;
#define glCallLists _glptr_glCallLists

typedef void (GL_APIENTRY *PFN_glColor4ubv)(const GLubyte * v);
extern PFN_glColor4ubv _glptr_glColor4ubv;
#define glColor4ubv _glptr_glColor4ubv

typedef void (GL_APIENTRY *PFN_glDeleteLists)(GLuint list, GLsizei range);
extern PFN_glDeleteLists _glptr_glDeleteLists;
#define glDeleteLists _glptr_glDeleteLists

typedef void (GL_APIENTRY *PFN_glColor3iv)(const GLint * v);
extern PFN_glColor3iv _glptr_glColor3iv;
#define glColor3iv _glptr_glColor3iv

typedef void (GL_APIENTRY *PFN_glUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFN_glUniform4d _glptr_glUniform4d;
#define glUniform4d _glptr_glUniform4d

typedef void (GL_APIENTRY *PFN_glGenVertexArrays)(GLsizei n, GLuint * arrays);
extern PFN_glGenVertexArrays _glptr_glGenVertexArrays;
#define glGenVertexArrays _glptr_glGenVertexArrays

typedef void (GL_APIENTRY *PFN_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix2x4fv _glptr_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv _glptr_glUniformMatrix2x4fv

typedef void (GL_APIENTRY *PFN_glRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
extern PFN_glRasterPos4s _glptr_glRasterPos4s;
#define glRasterPos4s _glptr_glRasterPos4s

typedef void (GL_APIENTRY *PFN_glBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
extern PFN_glBitmap _glptr_glBitmap;
#define glBitmap _glptr_glBitmap

typedef void (GL_APIENTRY *PFN_glStencilMaskSeparate)(GLenum face, GLuint mask);
extern PFN_glStencilMaskSeparate _glptr_glStencilMaskSeparate;
#define glStencilMaskSeparate _glptr_glStencilMaskSeparate

typedef void (GL_APIENTRY *PFN_glWindowPos3s)(GLshort x, GLshort y, GLshort z);
extern PFN_glWindowPos3s _glptr_glWindowPos3s;
#define glWindowPos3s _glptr_glWindowPos3s

typedef void (GL_APIENTRY *PFN_glRasterPos3dv)(const GLdouble * v);
extern PFN_glRasterPos3dv _glptr_glRasterPos3dv;
#define glRasterPos3dv _glptr_glRasterPos3dv

typedef void (GL_APIENTRY *PFN_glUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix4x3dv _glptr_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv _glptr_glUniformMatrix4x3dv

typedef void (GL_APIENTRY *PFN_glPopAttrib)();
extern PFN_glPopAttrib _glptr_glPopAttrib;
#define glPopAttrib _glptr_glPopAttrib

typedef void (GL_APIENTRY *PFN_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexImage2D _glptr_glCompressedTexImage2D;
#define glCompressedTexImage2D _glptr_glCompressedTexImage2D

typedef void (GL_APIENTRY *PFN_glVertexAttrib2fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib2fv _glptr_glVertexAttrib2fv;
#define glVertexAttrib2fv _glptr_glVertexAttrib2fv

typedef void (GL_APIENTRY *PFN_glRectsv)(const GLshort * v1, const GLshort * v2);
extern PFN_glRectsv _glptr_glRectsv;
#define glRectsv _glptr_glRectsv

typedef void (GL_APIENTRY *PFN_glNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
extern PFN_glNormal3b _glptr_glNormal3b;
#define glNormal3b _glptr_glNormal3b

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1d)(GLenum target, GLdouble s);
extern PFN_glMultiTexCoord1d _glptr_glMultiTexCoord1d;
#define glMultiTexCoord1d _glptr_glMultiTexCoord1d

typedef void (GL_APIENTRY *PFN_glRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFN_glRasterPos4d _glptr_glRasterPos4d;
#define glRasterPos4d _glptr_glRasterPos4d

typedef void (GL_APIENTRY *PFN_glColor3bv)(const GLbyte * v);
extern PFN_glColor3bv _glptr_glColor3bv;
#define glColor3bv _glptr_glColor3bv

typedef void (GL_APIENTRY *PFN_glGetFloatv)(GLenum pname, GLfloat * data);
extern PFN_glGetFloatv _glptr_glGetFloatv;
#define glGetFloatv _glptr_glGetFloatv

typedef void (GL_APIENTRY *PFN_glPushAttrib)(GLbitfield mask);
extern PFN_glPushAttrib _glptr_glPushAttrib;
#define glPushAttrib _glptr_glPushAttrib

typedef void (GL_APIENTRY *PFN_glNormal3dv)(const GLdouble * v);
extern PFN_glNormal3dv _glptr_glNormal3dv;
#define glNormal3dv _glptr_glNormal3dv

typedef void (GL_APIENTRY *PFN_glDepthFunc)(GLenum func);
extern PFN_glDepthFunc _glptr_glDepthFunc;
#define glDepthFunc _glptr_glDepthFunc

typedef void (GL_APIENTRY *PFN_glGetShaderiv)(GLuint shader, GLenum pname, GLint * params);
extern PFN_glGetShaderiv _glptr_glGetShaderiv;
#define glGetShaderiv _glptr_glGetShaderiv

typedef void (GL_APIENTRY *PFN_glMultMatrixd)(const GLdouble * m);
extern PFN_glMultMatrixd _glptr_glMultMatrixd;
#define glMultMatrixd _glptr_glMultMatrixd

typedef void (GL_APIENTRY *PFN_glVertexAttrib4uiv)(GLuint index, const GLuint * v);
extern PFN_glVertexAttrib4uiv _glptr_glVertexAttrib4uiv;
#define glVertexAttrib4uiv _glptr_glVertexAttrib4uiv

typedef void (GL_APIENTRY *PFN_glEdgeFlag)(GLboolean flag);
extern PFN_glEdgeFlag _glptr_glEdgeFlag;
#define glEdgeFlag _glptr_glEdgeFlag

typedef void (GL_APIENTRY *PFN_glPolygonMode)(GLenum face, GLenum mode);
extern PFN_glPolygonMode _glptr_glPolygonMode;
#define glPolygonMode _glptr_glPolygonMode

typedef void (GL_APIENTRY *PFN_glBindSampler)(GLuint unit, GLuint sampler);
extern PFN_glBindSampler _glptr_glBindSampler;
#define glBindSampler _glptr_glBindSampler

typedef void (GL_APIENTRY *PFN_glColor3f)(GLfloat red, GLfloat green, GLfloat blue);
extern PFN_glColor3f _glptr_glColor3f;
#define glColor3f _glptr_glColor3f

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords);
extern PFN_glMultiTexCoordP2ui _glptr_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui _glptr_glMultiTexCoordP2ui

typedef void (GL_APIENTRY *PFN_glColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
extern PFN_glColor4d _glptr_glColor4d;
#define glColor4d _glptr_glColor4d

typedef void (GL_APIENTRY *PFN_glColor3i)(GLint red, GLint green, GLint blue);
extern PFN_glColor3i _glptr_glColor3i;
#define glColor3i _glptr_glColor3i

typedef void (GL_APIENTRY *PFN_glVertexAttrib4fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib4fv _glptr_glVertexAttrib4fv;
#define glVertexAttrib4fv _glptr_glVertexAttrib4fv

typedef void (GL_APIENTRY *PFN_glRasterPos2dv)(const GLdouble * v);
extern PFN_glRasterPos2dv _glptr_glRasterPos2dv;
#define glRasterPos2dv _glptr_glRasterPos2dv

typedef void (GL_APIENTRY *PFN_glColor3fv)(const GLfloat * v);
extern PFN_glColor3fv _glptr_glColor3fv;
#define glColor3fv _glptr_glColor3fv

typedef void (GL_APIENTRY *PFN_glEvalMesh1)(GLenum mode, GLint i1, GLint i2);
extern PFN_glEvalMesh1 _glptr_glEvalMesh1;
#define glEvalMesh1 _glptr_glEvalMesh1

typedef void (GL_APIENTRY *PFN_glTexEnvf)(GLenum target, GLenum pname, GLfloat param);
extern PFN_glTexEnvf _glptr_glTexEnvf;
#define glTexEnvf _glptr_glTexEnvf

typedef void (GL_APIENTRY *PFN_glIndexMask)(GLuint mask);
extern PFN_glIndexMask _glptr_glIndexMask;
#define glIndexMask _glptr_glIndexMask

typedef void (GL_APIENTRY *PFN_glMapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
extern PFN_glMapGrid1f _glptr_glMapGrid1f;
#define glMapGrid1f _glptr_glMapGrid1f

typedef void (GL_APIENTRY *PFN_glRectfv)(const GLfloat * v1, const GLfloat * v2);
extern PFN_glRectfv _glptr_glRectfv;
#define glRectfv _glptr_glRectfv

typedef void (GL_APIENTRY *PFN_glEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
extern PFN_glEvalMesh2 _glptr_glEvalMesh2;
#define glEvalMesh2 _glptr_glEvalMesh2

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords);
extern PFN_glMultiTexCoordP4ui _glptr_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui _glptr_glMultiTexCoordP4ui

typedef void (GL_APIENTRY *PFN_glVertexAttribI4usv)(GLuint index, const GLushort * v);
extern PFN_glVertexAttribI4usv _glptr_glVertexAttribI4usv;
#define glVertexAttribI4usv _glptr_glVertexAttribI4usv

typedef void (GL_APIENTRY *PFN_glRasterPos2fv)(const GLfloat * v);
extern PFN_glRasterPos2fv _glptr_glRasterPos2fv;
#define glRasterPos2fv _glptr_glRasterPos2fv

typedef void (GL_APIENTRY *PFN_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
extern PFN_glStencilOp _glptr_glStencilOp;
#define glStencilOp _glptr_glStencilOp

typedef void (GL_APIENTRY *PFN_glGetIntegerv)(GLenum pname, GLint * data);
extern PFN_glGetIntegerv _glptr_glGetIntegerv;
#define glGetIntegerv _glptr_glGetIntegerv

typedef void (GL_APIENTRY *PFN_glClear)(GLbitfield mask);
extern PFN_glClear _glptr_glClear;
#define glClear _glptr_glClear

typedef void (GL_APIENTRY *PFN_glColor4uiv)(const GLuint * v);
extern PFN_glColor4uiv _glptr_glColor4uiv;
#define glColor4uiv _glptr_glColor4uiv

typedef void (GL_APIENTRY *PFN_glVertex2d)(GLdouble x, GLdouble y);
extern PFN_glVertex2d _glptr_glVertex2d;
#define glVertex2d _glptr_glVertex2d

typedef void (GL_APIENTRY *PFN_glIndexub)(GLubyte c);
extern PFN_glIndexub _glptr_glIndexub;
#define glIndexub _glptr_glIndexub

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
extern PFN_glMultiTexCoord3f _glptr_glMultiTexCoord3f;
#define glMultiTexCoord3f _glptr_glMultiTexCoord3f

typedef void (GL_APIENTRY *PFN_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint * param);
extern PFN_glSamplerParameteriv _glptr_glSamplerParameteriv;
#define glSamplerParameteriv _glptr_glSamplerParameteriv

typedef void (GL_APIENTRY *PFN_glRasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
extern PFN_glRasterPos3d _glptr_glRasterPos3d;
#define glRasterPos3d _glptr_glRasterPos3d

typedef void (GL_APIENTRY *PFN_glSecondaryColor3uiv)(const GLuint * v);
extern PFN_glSecondaryColor3uiv _glptr_glSecondaryColor3uiv;
#define glSecondaryColor3uiv _glptr_glSecondaryColor3uiv

typedef void (GL_APIENTRY *PFN_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern PFN_glRotatef _glptr_glRotatef;
#define glRotatef _glptr_glRotatef

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4dv)(GLenum target, const GLdouble * v);
extern PFN_glMultiTexCoord4dv _glptr_glMultiTexCoord4dv;
#define glMultiTexCoord4dv _glptr_glMultiTexCoord4dv

typedef void (GL_APIENTRY *PFN_glTexCoord2iv)(const GLint * v);
extern PFN_glTexCoord2iv _glptr_glTexCoord2iv;
#define glTexCoord2iv _glptr_glTexCoord2iv

typedef void (GL_APIENTRY *PFN_glNormal3i)(GLint nx, GLint ny, GLint nz);
extern PFN_glNormal3i _glptr_glNormal3i;
#define glNormal3i _glptr_glNormal3i

typedef void (GL_APIENTRY *PFN_glMaterialf)(GLenum face, GLenum pname, GLfloat param);
extern PFN_glMaterialf _glptr_glMaterialf;
#define glMaterialf _glptr_glMaterialf

typedef void (GL_APIENTRY *PFN_glGetUniformdv)(GLuint program, GLint location, GLdouble * params);
extern PFN_glGetUniformdv _glptr_glGetUniformdv;
#define glGetUniformdv _glptr_glGetUniformdv

typedef void (GL_APIENTRY *PFN_glOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern PFN_glOrtho _glptr_glOrtho;
#define glOrtho _glptr_glOrtho

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint * coords);
extern PFN_glMultiTexCoordP2uiv _glptr_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv _glptr_glMultiTexCoordP2uiv

typedef void (GL_APIENTRY *PFN_glColor3ubv)(const GLubyte * v);
extern PFN_glColor3ubv _glptr_glColor3ubv;
#define glColor3ubv _glptr_glColor3ubv

typedef void (GL_APIENTRY *PFN_glGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
extern PFN_glGetTexImage _glptr_glGetTexImage;
#define glGetTexImage _glptr_glGetTexImage

typedef void (GL_APIENTRY *PFN_glColor3b)(GLbyte red, GLbyte green, GLbyte blue);
extern PFN_glColor3b _glptr_glColor3b;
#define glColor3b _glptr_glColor3b

typedef void (GL_APIENTRY *PFN_glSecondaryColor3sv)(const GLshort * v);
extern PFN_glSecondaryColor3sv _glptr_glSecondaryColor3sv;
#define glSecondaryColor3sv _glptr_glSecondaryColor3sv

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint * coords);
extern PFN_glMultiTexCoordP3uiv _glptr_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv _glptr_glMultiTexCoordP3uiv

typedef void (GL_APIENTRY *PFN_glVertex2i)(GLint x, GLint y);
extern PFN_glVertex2i _glptr_glVertex2i;
#define glVertex2i _glptr_glVertex2i

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4fv)(GLenum target, const GLfloat * v);
extern PFN_glMultiTexCoord4fv _glptr_glMultiTexCoord4fv;
#define glMultiTexCoord4fv _glptr_glMultiTexCoord4fv

typedef void (GL_APIENTRY *PFN_glGetTexParameteriv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetTexParameteriv _glptr_glGetTexParameteriv;
#define glGetTexParameteriv _glptr_glGetTexParameteriv

typedef void (GL_APIENTRY *PFN_glColor3ui)(GLuint red, GLuint green, GLuint blue);
extern PFN_glColor3ui _glptr_glColor3ui;
#define glColor3ui _glptr_glColor3ui

typedef void (GL_APIENTRY *PFN_glScaled)(GLdouble x, GLdouble y, GLdouble z);
extern PFN_glScaled _glptr_glScaled;
#define glScaled _glptr_glScaled

typedef void (GL_APIENTRY *PFN_glColor4i)(GLint red, GLint green, GLint blue, GLint alpha);
extern PFN_glColor4i _glptr_glColor4i;
#define glColor4i _glptr_glColor4i

typedef void (GL_APIENTRY *PFN_glSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
extern PFN_glSecondaryColor3b _glptr_glSecondaryColor3b;
#define glSecondaryColor3b _glptr_glSecondaryColor3b

typedef void (GL_APIENTRY *PFN_glColor4dv)(const GLdouble * v);
extern PFN_glColor4dv _glptr_glColor4dv;
#define glColor4dv _glptr_glColor4dv

typedef void (GL_APIENTRY *PFN_glStencilMask)(GLuint mask);
extern PFN_glStencilMask _glptr_glStencilMask;
#define glStencilMask _glptr_glStencilMask

typedef void (GL_APIENTRY *PFN_glTranslatef)(GLfloat x, GLfloat y, GLfloat z);
extern PFN_glTranslatef _glptr_glTranslatef;
#define glTranslatef _glptr_glTranslatef

typedef void (GL_APIENTRY *PFN_glNewList)(GLuint list, GLenum mode);
extern PFN_glNewList _glptr_glNewList;
#define glNewList _glptr_glNewList

typedef void (GL_APIENTRY *PFN_glColor4fv)(const GLfloat * v);
extern PFN_glColor4fv _glptr_glColor4fv;
#define glColor4fv _glptr_glColor4fv

typedef void (GL_APIENTRY *PFN_glColor4iv)(const GLint * v);
extern PFN_glColor4iv _glptr_glColor4iv;
#define glColor4iv _glptr_glColor4iv

typedef void (GL_APIENTRY *PFN_glFogCoordPointer)(GLenum type, GLsizei stride, const void * pointer);
extern PFN_glFogCoordPointer _glptr_glFogCoordPointer;
#define glFogCoordPointer _glptr_glFogCoordPointer

typedef void (GL_APIENTRY *PFN_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
extern PFN_glDrawElementsInstancedBaseVertex _glptr_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex _glptr_glDrawElementsInstancedBaseVertex

typedef void (GL_APIENTRY *PFN_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
extern PFN_glColor4ub _glptr_glColor4ub;
#define glColor4ub _glptr_glColor4ub

typedef void (GL_APIENTRY *PFN_glTexCoord2i)(GLint s, GLint t);
extern PFN_glTexCoord2i _glptr_glTexCoord2i;
#define glTexCoord2i _glptr_glTexCoord2i

typedef void (GL_APIENTRY *PFN_glColor3s)(GLshort red, GLshort green, GLshort blue);
extern PFN_glColor3s _glptr_glColor3s;
#define glColor3s _glptr_glColor3s

typedef void (GL_APIENTRY *PFN_glColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
extern PFN_glColor4ui _glptr_glColor4ui;
#define glColor4ui _glptr_glColor4ui

typedef void (GL_APIENTRY *PFN_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glCopyTexSubImage3D _glptr_glCopyTexSubImage3D;
#define glCopyTexSubImage3D _glptr_glCopyTexSubImage3D

typedef void (GL_APIENTRY *PFN_glColor4usv)(const GLushort * v);
extern PFN_glColor4usv _glptr_glColor4usv;
#define glColor4usv _glptr_glColor4usv

typedef void (GL_APIENTRY *PFN_glEdgeFlagv)(const GLboolean * flag);
extern PFN_glEdgeFlagv _glptr_glEdgeFlagv;
#define glEdgeFlagv _glptr_glEdgeFlagv

typedef void (GL_APIENTRY *PFN_glBlendFunci)(GLuint buf, GLenum src, GLenum dst);
extern PFN_glBlendFunci _glptr_glBlendFunci;
#define glBlendFunci _glptr_glBlendFunci

typedef void (GL_APIENTRY *PFN_glEnd)();
extern PFN_glEnd _glptr_glEnd;
#define glEnd _glptr_glEnd

typedef void (GL_APIENTRY *PFN_glIndexfv)(const GLfloat * c);
extern PFN_glIndexfv _glptr_glIndexfv;
#define glIndexfv _glptr_glIndexfv

typedef void (GL_APIENTRY *PFN_glColorMaterial)(GLenum face, GLenum mode);
extern PFN_glColorMaterial _glptr_glColorMaterial;
#define glColorMaterial _glptr_glColorMaterial

typedef void (GL_APIENTRY *PFN_glFogf)(GLenum pname, GLfloat param);
extern PFN_glFogf _glptr_glFogf;
#define glFogf _glptr_glFogf

typedef void (GL_APIENTRY *PFN_glTranslated)(GLdouble x, GLdouble y, GLdouble z);
extern PFN_glTranslated _glptr_glTranslated;
#define glTranslated _glptr_glTranslated

typedef void (GL_APIENTRY *PFN_glFogfv)(GLenum pname, const GLfloat * params);
extern PFN_glFogfv _glptr_glFogfv;
#define glFogfv _glptr_glFogfv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern PFN_glMultiTexCoord4d _glptr_glMultiTexCoord4d;
#define glMultiTexCoord4d _glptr_glMultiTexCoord4d

typedef void (GL_APIENTRY *PFN_glPixelTransferi)(GLenum pname, GLint param);
extern PFN_glPixelTransferi _glptr_glPixelTransferi;
#define glPixelTransferi _glptr_glPixelTransferi

typedef void (GL_APIENTRY *PFN_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
extern PFN_glTexParameterfv _glptr_glTexParameterfv;
#define glTexParameterfv _glptr_glTexParameterfv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4iv)(GLenum target, const GLint * v);
extern PFN_glMultiTexCoord4iv _glptr_glMultiTexCoord4iv;
#define glMultiTexCoord4iv _glptr_glMultiTexCoord4iv

typedef GLboolean (GL_APIENTRY *PFN_glIsVertexArray)(GLuint array);
extern PFN_glIsVertexArray _glptr_glIsVertexArray;
#define glIsVertexArray _glptr_glIsVertexArray

typedef void (GL_APIENTRY *PFN_glFogiv)(GLenum pname, const GLint * params);
extern PFN_glFogiv _glptr_glFogiv;
#define glFogiv _glptr_glFogiv

typedef void (GL_APIENTRY *PFN_glGetCompressedTexImage)(GLenum target, GLint level, void * img);
extern PFN_glGetCompressedTexImage _glptr_glGetCompressedTexImage;
#define glGetCompressedTexImage _glptr_glGetCompressedTexImage

typedef void (GL_APIENTRY *PFN_glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern PFN_glFramebufferTexture3D _glptr_glFramebufferTexture3D;
#define glFramebufferTexture3D _glptr_glFramebufferTexture3D

typedef void (GL_APIENTRY *PFN_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix4x2fv _glptr_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv _glptr_glUniformMatrix4x2fv

typedef void (GL_APIENTRY *PFN_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexSubImage3D _glptr_glTexSubImage3D;
#define glTexSubImage3D _glptr_glTexSubImage3D

typedef void (GL_APIENTRY *PFN_glLightf)(GLenum light, GLenum pname, GLfloat param);
extern PFN_glLightf _glptr_glLightf;
#define glLightf _glptr_glLightf

typedef void (GL_APIENTRY *PFN_glLightfv)(GLenum light, GLenum pname, const GLfloat * params);
extern PFN_glLightfv _glptr_glLightfv;
#define glLightfv _glptr_glLightfv

typedef void (GL_APIENTRY *PFN_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern PFN_glBlendEquationSeparatei _glptr_glBlendEquationSeparatei;
#define glBlendEquationSeparatei _glptr_glBlendEquationSeparatei

typedef void (GL_APIENTRY *PFN_glGetPointerv)(GLenum pname, void ** params);
extern PFN_glGetPointerv _glptr_glGetPointerv;
#define glGetPointerv _glptr_glGetPointerv

typedef void (GL_APIENTRY *PFN_glLighti)(GLenum light, GLenum pname, GLint param);
extern PFN_glLighti _glptr_glLighti;
#define glLighti _glptr_glLighti

typedef void (GL_APIENTRY *PFN_glMaterialiv)(GLenum face, GLenum pname, const GLint * params);
extern PFN_glMaterialiv _glptr_glMaterialiv;
#define glMaterialiv _glptr_glMaterialiv

typedef void (GL_APIENTRY *PFN_glEdgeFlagPointer)(GLsizei stride, const void * pointer);
extern PFN_glEdgeFlagPointer _glptr_glEdgeFlagPointer;
#define glEdgeFlagPointer _glptr_glEdgeFlagPointer

typedef void (GL_APIENTRY *PFN_glPauseTransformFeedback)();
extern PFN_glPauseTransformFeedback _glptr_glPauseTransformFeedback;
#define glPauseTransformFeedback _glptr_glPauseTransformFeedback

typedef void (GL_APIENTRY *PFN_glGetDoublev)(GLenum pname, GLdouble * data);
extern PFN_glGetDoublev _glptr_glGetDoublev;
#define glGetDoublev _glptr_glGetDoublev

typedef void (GL_APIENTRY *PFN_glLightModelf)(GLenum pname, GLfloat param);
extern PFN_glLightModelf _glptr_glLightModelf;
#define glLightModelf _glptr_glLightModelf

typedef void (GL_APIENTRY *PFN_glLightModelfv)(GLenum pname, const GLfloat * params);
extern PFN_glLightModelfv _glptr_glLightModelfv;
#define glLightModelfv _glptr_glLightModelfv

typedef void (GL_APIENTRY *PFN_glMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
extern PFN_glMap1f _glptr_glMap1f;
#define glMap1f _glptr_glMap1f

typedef void (GL_APIENTRY *PFN_glLightModeli)(GLenum pname, GLint param);
extern PFN_glLightModeli _glptr_glLightModeli;
#define glLightModeli _glptr_glLightModeli

typedef void (GL_APIENTRY *PFN_glTexCoordP3ui)(GLenum type, GLuint coords);
extern PFN_glTexCoordP3ui _glptr_glTexCoordP3ui;
#define glTexCoordP3ui _glptr_glTexCoordP3ui

typedef void (GL_APIENTRY *PFN_glPixelStorei)(GLenum pname, GLint param);
extern PFN_glPixelStorei _glptr_glPixelStorei;
#define glPixelStorei _glptr_glPixelStorei

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
extern PFN_glMultiTexCoord4s _glptr_glMultiTexCoord4s;
#define glMultiTexCoord4s _glptr_glMultiTexCoord4s

typedef void (GL_APIENTRY *PFN_glVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFN_glVertexAttribP4uiv _glptr_glVertexAttribP4uiv;
#define glVertexAttribP4uiv _glptr_glVertexAttribP4uiv

typedef void (GL_APIENTRY *PFN_glLightModeliv)(GLenum pname, const GLint * params);
extern PFN_glLightModeliv _glptr_glLightModeliv;
#define glLightModeliv _glptr_glLightModeliv

typedef void (GL_APIENTRY *PFN_glLineStipple)(GLint factor, GLushort pattern);
extern PFN_glLineStipple _glptr_glLineStipple;
#define glLineStipple _glptr_glLineStipple

typedef void (GL_APIENTRY *PFN_glSecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
extern PFN_glSecondaryColor3s _glptr_glSecondaryColor3s;
#define glSecondaryColor3s _glptr_glSecondaryColor3s

typedef void (GL_APIENTRY *PFN_glMateriali)(GLenum face, GLenum pname, GLint param);
extern PFN_glMateriali _glptr_glMateriali;
#define glMateriali _glptr_glMateriali

typedef void (GL_APIENTRY *PFN_glTexEnvi)(GLenum target, GLenum pname, GLint param);
extern PFN_glTexEnvi _glptr_glTexEnvi;
#define glTexEnvi _glptr_glTexEnvi

typedef void (GL_APIENTRY *PFN_glVertexAttribDivisor)(GLuint index, GLuint divisor);
extern PFN_glVertexAttribDivisor _glptr_glVertexAttribDivisor;
#define glVertexAttribDivisor _glptr_glVertexAttribDivisor

typedef void (GL_APIENTRY *PFN_glUniform1fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform1fv _glptr_glUniform1fv;
#define glUniform1fv _glptr_glUniform1fv

typedef void (GL_APIENTRY *PFN_glTexGend)(GLenum coord, GLenum pname, GLdouble param);
extern PFN_glTexGend _glptr_glTexGend;
#define glTexGend _glptr_glTexGend

typedef GLboolean (GL_APIENTRY *PFN_glIsSampler)(GLuint sampler);
extern PFN_glIsSampler _glptr_glIsSampler;
#define glIsSampler _glptr_glIsSampler

typedef void (GL_APIENTRY *PFN_glTexGendv)(GLenum coord, GLenum pname, const GLdouble * params);
extern PFN_glTexGendv _glptr_glTexGendv;
#define glTexGendv _glptr_glTexGendv

typedef void (GL_APIENTRY *PFN_glTexGenfv)(GLenum coord, GLenum pname, const GLfloat * params);
extern PFN_glTexGenfv _glptr_glTexGenfv;
#define glTexGenfv _glptr_glTexGenfv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2dv)(GLenum target, const GLdouble * v);
extern PFN_glMultiTexCoord2dv _glptr_glMultiTexCoord2dv;
#define glMultiTexCoord2dv _glptr_glMultiTexCoord2dv

typedef void (GL_APIENTRY *PFN_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat * params);
extern PFN_glGetTexEnvfv _glptr_glGetTexEnvfv;
#define glGetTexEnvfv _glptr_glGetTexEnvfv

typedef void (GL_APIENTRY *PFN_glFeedbackBuffer)(GLsizei size, GLenum type, GLfloat * buffer);
extern PFN_glFeedbackBuffer _glptr_glFeedbackBuffer;
#define glFeedbackBuffer _glptr_glFeedbackBuffer

typedef void (GL_APIENTRY *PFN_glVertexAttribI3uiv)(GLuint index, const GLuint * v);
extern PFN_glVertexAttribI3uiv _glptr_glVertexAttribI3uiv;
#define glVertexAttribI3uiv _glptr_glVertexAttribI3uiv

typedef void (GL_APIENTRY *PFN_glClearIndex)(GLfloat c);
extern PFN_glClearIndex _glptr_glClearIndex;
#define glClearIndex _glptr_glClearIndex

typedef void (GL_APIENTRY *PFN_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat * val);
extern PFN_glGetMultisamplefv _glptr_glGetMultisamplefv;
#define glGetMultisamplefv _glptr_glGetMultisamplefv

typedef void (GL_APIENTRY *PFN_glSelectBuffer)(GLsizei size, GLuint * buffer);
extern PFN_glSelectBuffer _glptr_glSelectBuffer;
#define glSelectBuffer _glptr_glSelectBuffer

typedef void (GL_APIENTRY *PFN_glVertexAttrib1s)(GLuint index, GLshort x);
extern PFN_glVertexAttrib1s _glptr_glVertexAttrib1s;
#define glVertexAttrib1s _glptr_glVertexAttrib1s

typedef void (GL_APIENTRY *PFN_glInitNames)();
extern PFN_glInitNames _glptr_glInitNames;
#define glInitNames _glptr_glInitNames

typedef void (GL_APIENTRY *PFN_glUseProgram)(GLuint program);
extern PFN_glUseProgram _glptr_glUseProgram;
#define glUseProgram _glptr_glUseProgram

typedef void (GL_APIENTRY *PFN_glLoadName)(GLuint name);
extern PFN_glLoadName _glptr_glLoadName;
#define glLoadName _glptr_glLoadName

typedef void (GL_APIENTRY *PFN_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
extern PFN_glVertexAttrib2f _glptr_glVertexAttrib2f;
#define glVertexAttrib2f _glptr_glVertexAttrib2f

typedef void (GL_APIENTRY *PFN_glFrontFace)(GLenum mode);
extern PFN_glFrontFace _glptr_glFrontFace;
#define glFrontFace _glptr_glFrontFace

typedef void (GL_APIENTRY *PFN_glMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
extern PFN_glMapGrid2f _glptr_glMapGrid2f;
#define glMapGrid2f _glptr_glMapGrid2f

typedef void (GL_APIENTRY *PFN_glVertex4dv)(const GLdouble * v);
extern PFN_glVertex4dv _glptr_glVertex4dv;
#define glVertex4dv _glptr_glVertex4dv

typedef void (GL_APIENTRY *PFN_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexSubImage2D _glptr_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D _glptr_glCompressedTexSubImage2D

typedef void (GL_APIENTRY *PFN_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
extern PFN_glGetUniformIndices _glptr_glGetUniformIndices;
#define glGetUniformIndices _glptr_glGetUniformIndices

typedef void (GL_APIENTRY *PFN_glPassThrough)(GLfloat token);
extern PFN_glPassThrough _glptr_glPassThrough;
#define glPassThrough _glptr_glPassThrough

typedef const GLubyte  * (GL_APIENTRY *PFN_glGetStringi)(GLenum name, GLuint index);
extern PFN_glGetStringi _glptr_glGetStringi;
#define glGetStringi _glptr_glGetStringi

typedef void (GL_APIENTRY *PFN_glPushName)(GLuint name);
extern PFN_glPushName _glptr_glPushName;
#define glPushName _glptr_glPushName

typedef void (GL_APIENTRY *PFN_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint * params);
extern PFN_glGetVertexAttribIiv _glptr_glGetVertexAttribIiv;
#define glGetVertexAttribIiv _glptr_glGetVertexAttribIiv

typedef void (GL_APIENTRY *PFN_glClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFN_glClearAccum _glptr_glClearAccum;
#define glClearAccum _glptr_glClearAccum

typedef void (GL_APIENTRY *PFN_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFN_glClearColor _glptr_glClearColor;
#define glClearColor _glptr_glClearColor

typedef void (GL_APIENTRY *PFN_glAccum)(GLenum op, GLfloat value);
extern PFN_glAccum _glptr_glAccum;
#define glAccum _glptr_glAccum

typedef void (GL_APIENTRY *PFN_glTexCoord4fv)(const GLfloat * v);
extern PFN_glTexCoord4fv _glptr_glTexCoord4fv;
#define glTexCoord4fv _glptr_glTexCoord4fv

typedef void (GL_APIENTRY *PFN_glMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
extern PFN_glMap1d _glptr_glMap1d;
#define glMap1d _glptr_glMap1d

typedef void (GL_APIENTRY *PFN_glMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
extern PFN_glMap2f _glptr_glMap2f;
#define glMap2f _glptr_glMap2f

typedef void (GL_APIENTRY *PFN_glCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexImage1D _glptr_glCompressedTexImage1D;
#define glCompressedTexImage1D _glptr_glCompressedTexImage1D

typedef void (GL_APIENTRY *PFN_glMapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
extern PFN_glMapGrid1d _glptr_glMapGrid1d;
#define glMapGrid1d _glptr_glMapGrid1d

typedef void (GL_APIENTRY *PFN_glWindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
extern PFN_glWindowPos3f _glptr_glWindowPos3f;
#define glWindowPos3f _glptr_glWindowPos3f

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4sv)(GLenum target, const GLshort * v);
extern PFN_glMultiTexCoord4sv _glptr_glMultiTexCoord4sv;
#define glMultiTexCoord4sv _glptr_glMultiTexCoord4sv

typedef void (GL_APIENTRY *PFN_glCullFace)(GLenum mode);
extern PFN_glCullFace _glptr_glCullFace;
#define glCullFace _glptr_glCullFace

typedef void (GL_APIENTRY *PFN_glMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
extern PFN_glMapGrid2d _glptr_glMapGrid2d;
#define glMapGrid2d _glptr_glMapGrid2d

typedef void (GL_APIENTRY *PFN_glEvalCoord1d)(GLdouble u);
extern PFN_glEvalCoord1d _glptr_glEvalCoord1d;
#define glEvalCoord1d _glptr_glEvalCoord1d

typedef void (GL_APIENTRY *PFN_glEvalCoord1dv)(const GLdouble * u);
extern PFN_glEvalCoord1dv _glptr_glEvalCoord1dv;
#define glEvalCoord1dv _glptr_glEvalCoord1dv

typedef void (GL_APIENTRY *PFN_glEvalCoord1f)(GLfloat u);
extern PFN_glEvalCoord1f _glptr_glEvalCoord1f;
#define glEvalCoord1f _glptr_glEvalCoord1f

typedef void (GL_APIENTRY *PFN_glEvalCoord2d)(GLdouble u, GLdouble v);
extern PFN_glEvalCoord2d _glptr_glEvalCoord2d;
#define glEvalCoord2d _glptr_glEvalCoord2d

typedef void (GL_APIENTRY *PFN_glEvalCoord2dv)(const GLdouble * u);
extern PFN_glEvalCoord2dv _glptr_glEvalCoord2dv;
#define glEvalCoord2dv _glptr_glEvalCoord2dv

typedef void (GL_APIENTRY *PFN_glEvalCoord2f)(GLfloat u, GLfloat v);
extern PFN_glEvalCoord2f _glptr_glEvalCoord2f;
#define glEvalCoord2f _glptr_glEvalCoord2f

typedef void (GL_APIENTRY *PFN_glPixelZoom)(GLfloat xfactor, GLfloat yfactor);
extern PFN_glPixelZoom _glptr_glPixelZoom;
#define glPixelZoom _glptr_glPixelZoom

typedef void (GL_APIENTRY *PFN_glPixelTransferf)(GLenum pname, GLfloat param);
extern PFN_glPixelTransferf _glptr_glPixelTransferf;
#define glPixelTransferf _glptr_glPixelTransferf

typedef void (GL_APIENTRY *PFN_glCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern PFN_glCopyTexImage1D _glptr_glCopyTexImage1D;
#define glCopyTexImage1D _glptr_glCopyTexImage1D

typedef void (GL_APIENTRY *PFN_glDetachShader)(GLuint program, GLuint shader);
extern PFN_glDetachShader _glptr_glDetachShader;
#define glDetachShader _glptr_glDetachShader

typedef void (GL_APIENTRY *PFN_glPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat * values);
extern PFN_glPixelMapfv _glptr_glPixelMapfv;
#define glPixelMapfv _glptr_glPixelMapfv

typedef void (GL_APIENTRY *PFN_glPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint * values);
extern PFN_glPixelMapuiv _glptr_glPixelMapuiv;
#define glPixelMapuiv _glptr_glPixelMapuiv

typedef void (GL_APIENTRY *PFN_glUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix3x4dv _glptr_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv _glptr_glUniformMatrix3x4dv

typedef void (GL_APIENTRY *PFN_glPopMatrix)();
extern PFN_glPopMatrix _glptr_glPopMatrix;
#define glPopMatrix _glptr_glPopMatrix

typedef void (GL_APIENTRY *PFN_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFN_glCopyTexImage2D _glptr_glCopyTexImage2D;
#define glCopyTexImage2D _glptr_glCopyTexImage2D

typedef void (GL_APIENTRY *PFN_glCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern PFN_glCopyPixels _glptr_glCopyPixels;
#define glCopyPixels _glptr_glCopyPixels

typedef void (GL_APIENTRY *PFN_glDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern PFN_glDrawPixels _glptr_glDrawPixels;
#define glDrawPixels _glptr_glDrawPixels

typedef void (GL_APIENTRY *PFN_glGetClipPlane)(GLenum plane, GLdouble * equation);
extern PFN_glGetClipPlane _glptr_glGetClipPlane;
#define glGetClipPlane _glptr_glGetClipPlane

typedef void (GL_APIENTRY *PFN_glGetLightfv)(GLenum light, GLenum pname, GLfloat * params);
extern PFN_glGetLightfv _glptr_glGetLightfv;
#define glGetLightfv _glptr_glGetLightfv

typedef void (GL_APIENTRY *PFN_glRasterPos4dv)(const GLdouble * v);
extern PFN_glRasterPos4dv _glptr_glRasterPos4dv;
#define glRasterPos4dv _glptr_glRasterPos4dv

typedef void (GL_APIENTRY *PFN_glGetLightiv)(GLenum light, GLenum pname, GLint * params);
extern PFN_glGetLightiv _glptr_glGetLightiv;
#define glGetLightiv _glptr_glGetLightiv

typedef void (GL_APIENTRY *PFN_glVertexP2ui)(GLenum type, GLuint value);
extern PFN_glVertexP2ui _glptr_glVertexP2ui;
#define glVertexP2ui _glptr_glVertexP2ui

typedef void (GL_APIENTRY *PFN_glShadeModel)(GLenum mode);
extern PFN_glShadeModel _glptr_glShadeModel;
#define glShadeModel _glptr_glShadeModel

typedef void (GL_APIENTRY *PFN_glGetMapfv)(GLenum target, GLenum query, GLfloat * v);
extern PFN_glGetMapfv _glptr_glGetMapfv;
#define glGetMapfv _glptr_glGetMapfv

typedef void (GL_APIENTRY *PFN_glGetMaterialiv)(GLenum face, GLenum pname, GLint * params);
extern PFN_glGetMaterialiv _glptr_glGetMaterialiv;
#define glGetMaterialiv _glptr_glGetMaterialiv

typedef void (GL_APIENTRY *PFN_glTexCoord2d)(GLdouble s, GLdouble t);
extern PFN_glTexCoord2d _glptr_glTexCoord2d;
#define glTexCoord2d _glptr_glTexCoord2d

typedef void (GL_APIENTRY *PFN_glListBase)(GLuint base);
extern PFN_glListBase _glptr_glListBase;
#define glListBase _glptr_glListBase

typedef void (GL_APIENTRY *PFN_glGetPixelMapfv)(GLenum map, GLfloat * values);
extern PFN_glGetPixelMapfv _glptr_glGetPixelMapfv;
#define glGetPixelMapfv _glptr_glGetPixelMapfv

typedef void (GL_APIENTRY *PFN_glVertex3fv)(const GLfloat * v);
extern PFN_glVertex3fv _glptr_glVertex3fv;
#define glVertex3fv _glptr_glVertex3fv

typedef void (GL_APIENTRY *PFN_glGetPixelMapuiv)(GLenum map, GLuint * values);
extern PFN_glGetPixelMapuiv _glptr_glGetPixelMapuiv;
#define glGetPixelMapuiv _glptr_glGetPixelMapuiv

typedef void (GL_APIENTRY *PFN_glGetPixelMapusv)(GLenum map, GLushort * values);
extern PFN_glGetPixelMapusv _glptr_glGetPixelMapusv;
#define glGetPixelMapusv _glptr_glGetPixelMapusv

typedef void (GL_APIENTRY *PFN_glGetPolygonStipple)(GLubyte * mask);
extern PFN_glGetPolygonStipple _glptr_glGetPolygonStipple;
#define glGetPolygonStipple _glptr_glGetPolygonStipple

typedef void (GL_APIENTRY *PFN_glGetTexGendv)(GLenum coord, GLenum pname, GLdouble * params);
extern PFN_glGetTexGendv _glptr_glGetTexGendv;
#define glGetTexGendv _glptr_glGetTexGendv

typedef void (GL_APIENTRY *PFN_glGetTexGeniv)(GLenum coord, GLenum pname, GLint * params);
extern PFN_glGetTexGeniv _glptr_glGetTexGeniv;
#define glGetTexGeniv _glptr_glGetTexGeniv

typedef void (GL_APIENTRY *PFN_glFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern PFN_glFrustum _glptr_glFrustum;
#define glFrustum _glptr_glFrustum

typedef void (GL_APIENTRY *PFN_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint * params);
extern PFN_glTexParameterIuiv _glptr_glTexParameterIuiv;
#define glTexParameterIuiv _glptr_glTexParameterIuiv

typedef void (GL_APIENTRY *PFN_glTexGeniv)(GLenum coord, GLenum pname, const GLint * params);
extern PFN_glTexGeniv _glptr_glTexGeniv;
#define glTexGeniv _glptr_glTexGeniv

typedef void (GL_APIENTRY *PFN_glLoadMatrixd)(const GLdouble * m);
extern PFN_glLoadMatrixd _glptr_glLoadMatrixd;
#define glLoadMatrixd _glptr_glLoadMatrixd

typedef void (GL_APIENTRY *PFN_glMatrixMode)(GLenum mode);
extern PFN_glMatrixMode _glptr_glMatrixMode;
#define glMatrixMode _glptr_glMatrixMode

typedef void (GL_APIENTRY *PFN_glDeleteShader)(GLuint shader);
extern PFN_glDeleteShader _glptr_glDeleteShader;
#define glDeleteShader _glptr_glDeleteShader

typedef void (GL_APIENTRY *PFN_glIndexf)(GLfloat c);
extern PFN_glIndexf _glptr_glIndexf;
#define glIndexf _glptr_glIndexf

typedef void (GL_APIENTRY *PFN_glMultMatrixf)(const GLfloat * m);
extern PFN_glMultMatrixf _glptr_glMultMatrixf;
#define glMultMatrixf _glptr_glMultMatrixf

typedef void (GL_APIENTRY *PFN_glWindowPos2d)(GLdouble x, GLdouble y);
extern PFN_glWindowPos2d _glptr_glWindowPos2d;
#define glWindowPos2d _glptr_glWindowPos2d

typedef void (GL_APIENTRY *PFN_glRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern PFN_glRotated _glptr_glRotated;
#define glRotated _glptr_glRotated

typedef void (GL_APIENTRY *PFN_glScalef)(GLfloat x, GLfloat y, GLfloat z);
extern PFN_glScalef _glptr_glScalef;
#define glScalef _glptr_glScalef

typedef void (GL_APIENTRY *PFN_glSecondaryColor3fv)(const GLfloat * v);
extern PFN_glSecondaryColor3fv _glptr_glSecondaryColor3fv;
#define glSecondaryColor3fv _glptr_glSecondaryColor3fv

typedef void (GL_APIENTRY *PFN_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
extern PFN_glDrawArrays _glptr_glDrawArrays;
#define glDrawArrays _glptr_glDrawArrays

typedef void (GL_APIENTRY *PFN_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices);
extern PFN_glDrawElements _glptr_glDrawElements;
#define glDrawElements _glptr_glDrawElements

typedef void (GL_APIENTRY *PFN_glUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix4x2dv _glptr_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv _glptr_glUniformMatrix4x2dv

typedef void (GL_APIENTRY *PFN_glCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFN_glCopyTexSubImage1D _glptr_glCopyTexSubImage1D;
#define glCopyTexSubImage1D _glptr_glCopyTexSubImage1D

typedef void (GL_APIENTRY *PFN_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
extern PFN_glDrawRangeElementsBaseVertex _glptr_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex _glptr_glDrawRangeElementsBaseVertex

typedef void (GL_APIENTRY *PFN_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFN_glClearBufferfi _glptr_glClearBufferfi;
#define glClearBufferfi _glptr_glClearBufferfi

typedef void (GL_APIENTRY *PFN_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glCopyTexSubImage2D _glptr_glCopyTexSubImage2D;
#define glCopyTexSubImage2D _glptr_glCopyTexSubImage2D

typedef void (GL_APIENTRY *PFN_glDeleteFramebuffers)(GLsizei n, const GLuint * framebuffers);
extern PFN_glDeleteFramebuffers _glptr_glDeleteFramebuffers;
#define glDeleteFramebuffers _glptr_glDeleteFramebuffers

typedef void (GL_APIENTRY *PFN_glAlphaFunc)(GLenum func, GLfloat ref);
extern PFN_glAlphaFunc _glptr_glAlphaFunc;
#define glAlphaFunc _glptr_glAlphaFunc

typedef void (GL_APIENTRY *PFN_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexSubImage2D _glptr_glTexSubImage2D;
#define glTexSubImage2D _glptr_glTexSubImage2D

typedef void (GL_APIENTRY *PFN_glTexCoord1d)(GLdouble s);
extern PFN_glTexCoord1d _glptr_glTexCoord1d;
#define glTexCoord1d _glptr_glTexCoord1d

typedef void (GL_APIENTRY *PFN_glBindTexture)(GLenum target, GLuint texture);
extern PFN_glBindTexture _glptr_glBindTexture;
#define glBindTexture _glptr_glBindTexture

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2sv)(GLenum target, const GLshort * v);
extern PFN_glMultiTexCoord2sv _glptr_glMultiTexCoord2sv;
#define glMultiTexCoord2sv _glptr_glMultiTexCoord2sv

typedef void (GL_APIENTRY *PFN_glRasterPos2iv)(const GLint * v);
extern PFN_glRasterPos2iv _glptr_glRasterPos2iv;
#define glRasterPos2iv _glptr_glRasterPos2iv

typedef void (GL_APIENTRY *PFN_glSecondaryColor3dv)(const GLdouble * v);
extern PFN_glSecondaryColor3dv _glptr_glSecondaryColor3dv;
#define glSecondaryColor3dv _glptr_glSecondaryColor3dv

typedef void (GL_APIENTRY *PFN_glTexCoordP2ui)(GLenum type, GLuint coords);
extern PFN_glTexCoordP2ui _glptr_glTexCoordP2ui;
#define glTexCoordP2ui _glptr_glTexCoordP2ui

typedef void (GL_APIENTRY *PFN_glGenTextures)(GLsizei n, GLuint * textures);
extern PFN_glGenTextures _glptr_glGenTextures;
#define glGenTextures _glptr_glGenTextures

typedef void (GL_APIENTRY *PFN_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFN_glVertexAttrib3f _glptr_glVertexAttrib3f;
#define glVertexAttrib3f _glptr_glVertexAttrib3f

typedef GLboolean (GL_APIENTRY *PFN_glIsTexture)(GLuint texture);
extern PFN_glIsTexture _glptr_glIsTexture;
#define glIsTexture _glptr_glIsTexture

typedef void (GL_APIENTRY *PFN_glVertexAttribI4uiv)(GLuint index, const GLuint * v);
extern PFN_glVertexAttribI4uiv _glptr_glVertexAttribI4uiv;
#define glVertexAttribI4uiv _glptr_glVertexAttribI4uiv

typedef void (GL_APIENTRY *PFN_glArrayElement)(GLint i);
extern PFN_glArrayElement _glptr_glArrayElement;
#define glArrayElement _glptr_glArrayElement

typedef void (GL_APIENTRY *PFN_glIndexPointer)(GLenum type, GLsizei stride, const void * pointer);
extern PFN_glIndexPointer _glptr_glIndexPointer;
#define glIndexPointer _glptr_glIndexPointer

typedef void (GL_APIENTRY *PFN_glDisableClientState)(GLenum array);
extern PFN_glDisableClientState _glptr_glDisableClientState;
#define glDisableClientState _glptr_glDisableClientState

typedef void (GL_APIENTRY *PFN_glInterleavedArrays)(GLenum format, GLsizei stride, const void * pointer);
extern PFN_glInterleavedArrays _glptr_glInterleavedArrays;
#define glInterleavedArrays _glptr_glInterleavedArrays

typedef void (GL_APIENTRY *PFN_glMultiDrawArrays)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
extern PFN_glMultiDrawArrays _glptr_glMultiDrawArrays;
#define glMultiDrawArrays _glptr_glMultiDrawArrays

typedef void (GL_APIENTRY *PFN_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFN_glTexCoordPointer _glptr_glTexCoordPointer;
#define glTexCoordPointer _glptr_glTexCoordPointer

typedef void (GL_APIENTRY *PFN_glPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort * values);
extern PFN_glPixelMapusv _glptr_glPixelMapusv;
#define glPixelMapusv _glptr_glPixelMapusv

typedef void (GL_APIENTRY *PFN_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFN_glVertexPointer _glptr_glVertexPointer;
#define glVertexPointer _glptr_glVertexPointer

typedef GLboolean (GL_APIENTRY *PFN_glAreTexturesResident)(GLsizei n, const GLuint * textures, GLboolean * residences);
extern PFN_glAreTexturesResident _glptr_glAreTexturesResident;
#define glAreTexturesResident _glptr_glAreTexturesResident

typedef GLint (GL_APIENTRY *PFN_glGetFragDataLocation)(GLuint program, const GLchar * name);
extern PFN_glGetFragDataLocation _glptr_glGetFragDataLocation;
#define glGetFragDataLocation _glptr_glGetFragDataLocation

typedef void (GL_APIENTRY *PFN_glPrioritizeTextures)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
extern PFN_glPrioritizeTextures _glptr_glPrioritizeTextures;
#define glPrioritizeTextures _glptr_glPrioritizeTextures

typedef void (GL_APIENTRY *PFN_glVertexP3uiv)(GLenum type, const GLuint * value);
extern PFN_glVertexP3uiv _glptr_glVertexP3uiv;
#define glVertexP3uiv _glptr_glVertexP3uiv

typedef void (GL_APIENTRY *PFN_glPopClientAttrib)();
extern PFN_glPopClientAttrib _glptr_glPopClientAttrib;
#define glPopClientAttrib _glptr_glPopClientAttrib

typedef void (GL_APIENTRY *PFN_glPointSize)(GLfloat size);
extern PFN_glPointSize _glptr_glPointSize;
#define glPointSize _glptr_glPointSize

typedef void (GL_APIENTRY *PFN_glRecti)(GLint x1, GLint y1, GLint x2, GLint y2);
extern PFN_glRecti _glptr_glRecti;
#define glRecti _glptr_glRecti

typedef void (GL_APIENTRY *PFN_glEvalPoint2)(GLint i, GLint j);
extern PFN_glEvalPoint2 _glptr_glEvalPoint2;
#define glEvalPoint2 _glptr_glEvalPoint2

typedef void (GL_APIENTRY *PFN_glColor3dv)(const GLdouble * v);
extern PFN_glColor3dv _glptr_glColor3dv;
#define glColor3dv _glptr_glColor3dv

typedef void (GL_APIENTRY *PFN_glLoadIdentity)();
extern PFN_glLoadIdentity _glptr_glLoadIdentity;
#define glLoadIdentity _glptr_glLoadIdentity

typedef void (GL_APIENTRY *PFN_glPushClientAttrib)(GLbitfield mask);
extern PFN_glPushClientAttrib _glptr_glPushClientAttrib;
#define glPushClientAttrib _glptr_glPushClientAttrib

typedef void (GL_APIENTRY *PFN_glUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix2x3dv _glptr_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv _glptr_glUniformMatrix2x3dv

typedef void (GL_APIENTRY *PFN_glEnableClientState)(GLenum array);
extern PFN_glEnableClientState _glptr_glEnableClientState;
#define glEnableClientState _glptr_glEnableClientState

typedef void (GL_APIENTRY *PFN_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFN_glColor4f _glptr_glColor4f;
#define glColor4f _glptr_glColor4f

typedef void (GL_APIENTRY *PFN_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexImage3D _glptr_glTexImage3D;
#define glTexImage3D _glptr_glTexImage3D

typedef void (GL_APIENTRY *PFN_glClearStencil)(GLint s);
extern PFN_glClearStencil _glptr_glClearStencil;
#define glClearStencil _glptr_glClearStencil

typedef void (GL_APIENTRY *PFN_glActiveTexture)(GLenum texture);
extern PFN_glActiveTexture _glptr_glActiveTexture;
#define glActiveTexture _glptr_glActiveTexture

typedef void (GL_APIENTRY *PFN_glVertexAttribI1uiv)(GLuint index, const GLuint * v);
extern PFN_glVertexAttribI1uiv _glptr_glVertexAttribI1uiv;
#define glVertexAttribI1uiv _glptr_glVertexAttribI1uiv

typedef void (GL_APIENTRY *PFN_glSampleCoverage)(GLfloat value, GLboolean invert);
extern PFN_glSampleCoverage _glptr_glSampleCoverage;
#define glSampleCoverage _glptr_glSampleCoverage

typedef void (GL_APIENTRY *PFN_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexImage3D _glptr_glCompressedTexImage3D;
#define glCompressedTexImage3D _glptr_glCompressedTexImage3D

typedef void (GL_APIENTRY *PFN_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexSubImage3D _glptr_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D _glptr_glCompressedTexSubImage3D

typedef void (GL_APIENTRY *PFN_glRasterPos2s)(GLshort x, GLshort y);
extern PFN_glRasterPos2s _glptr_glRasterPos2s;
#define glRasterPos2s _glptr_glRasterPos2s

typedef void (GL_APIENTRY *PFN_glClientActiveTexture)(GLenum texture);
extern PFN_glClientActiveTexture _glptr_glClientActiveTexture;
#define glClientActiveTexture _glptr_glClientActiveTexture

typedef void (GL_APIENTRY *PFN_glEnableVertexAttribArray)(GLuint index);
extern PFN_glEnableVertexAttribArray _glptr_glEnableVertexAttribArray;
#define glEnableVertexAttribArray _glptr_glEnableVertexAttribArray

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1dv)(GLenum target, const GLdouble * v);
extern PFN_glMultiTexCoord1dv _glptr_glMultiTexCoord1dv;
#define glMultiTexCoord1dv _glptr_glMultiTexCoord1dv

typedef void (GL_APIENTRY *PFN_glVertexP2uiv)(GLenum type, const GLuint * value);
extern PFN_glVertexP2uiv _glptr_glVertexP2uiv;
#define glVertexP2uiv _glptr_glVertexP2uiv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord1s)(GLenum target, GLshort s);
extern PFN_glMultiTexCoord1s _glptr_glMultiTexCoord1s;
#define glMultiTexCoord1s _glptr_glMultiTexCoord1s

typedef void (GL_APIENTRY *PFN_glColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
extern PFN_glColor4b _glptr_glColor4b;
#define glColor4b _glptr_glColor4b

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3iv)(GLenum target, const GLint * v);
extern PFN_glMultiTexCoord3iv _glptr_glMultiTexCoord3iv;
#define glMultiTexCoord3iv _glptr_glMultiTexCoord3iv

typedef void (GL_APIENTRY *PFN_glUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFN_glUniformMatrix3x2dv _glptr_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv _glptr_glUniformMatrix3x2dv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
extern PFN_glMultiTexCoord2f _glptr_glMultiTexCoord2f;
#define glMultiTexCoord2f _glptr_glMultiTexCoord2f

typedef void (GL_APIENTRY *PFN_glUniform4iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform4iv _glptr_glUniform4iv;
#define glUniform4iv _glptr_glUniform4iv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord2iv)(GLenum target, const GLint * v);
extern PFN_glMultiTexCoord2iv _glptr_glMultiTexCoord2iv;
#define glMultiTexCoord2iv _glptr_glMultiTexCoord2iv

typedef void (GL_APIENTRY *PFN_glUniform3dv)(GLint location, GLsizei count, const GLdouble * value);
extern PFN_glUniform3dv _glptr_glUniform3dv;
#define glUniform3dv _glptr_glUniform3dv

typedef void (GL_APIENTRY *PFN_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
extern PFN_glDrawElementsInstanced _glptr_glDrawElementsInstanced;
#define glDrawElementsInstanced _glptr_glDrawElementsInstanced

typedef void (GL_APIENTRY *PFN_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint * params);
extern PFN_glGetQueryObjectuiv _glptr_glGetQueryObjectuiv;
#define glGetQueryObjectuiv _glptr_glGetQueryObjectuiv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3dv)(GLenum target, const GLdouble * v);
extern PFN_glMultiTexCoord3dv _glptr_glMultiTexCoord3dv;
#define glMultiTexCoord3dv _glptr_glMultiTexCoord3dv

typedef void (GL_APIENTRY *PFN_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix3x4fv _glptr_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv _glptr_glUniformMatrix3x4fv

typedef void (GL_APIENTRY *PFN_glUniform4fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform4fv _glptr_glUniform4fv;
#define glUniform4fv _glptr_glUniform4fv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3fv)(GLenum target, const GLfloat * v);
extern PFN_glMultiTexCoord3fv _glptr_glMultiTexCoord3fv;
#define glMultiTexCoord3fv _glptr_glMultiTexCoord3fv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
extern PFN_glMultiTexCoord3s _glptr_glMultiTexCoord3s;
#define glMultiTexCoord3s _glptr_glMultiTexCoord3s

typedef void (GL_APIENTRY *PFN_glMultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint * coords);
extern PFN_glMultiTexCoordP4uiv _glptr_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv _glptr_glMultiTexCoordP4uiv

typedef void (GL_APIENTRY *PFN_glPointParameteri)(GLenum pname, GLint param);
extern PFN_glPointParameteri _glptr_glPointParameteri;
#define glPointParameteri _glptr_glPointParameteri

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3sv)(GLenum target, const GLshort * v);
extern PFN_glMultiTexCoord3sv _glptr_glMultiTexCoord3sv;
#define glMultiTexCoord3sv _glptr_glMultiTexCoord3sv

typedef void (GL_APIENTRY *PFN_glGetUniformuiv)(GLuint program, GLint location, GLuint * params);
extern PFN_glGetUniformuiv _glptr_glGetUniformuiv;
#define glGetUniformuiv _glptr_glGetUniformuiv

typedef void (GL_APIENTRY *PFN_glMultTransposeMatrixf)(const GLfloat * m);
extern PFN_glMultTransposeMatrixf _glptr_glMultTransposeMatrixf;
#define glMultTransposeMatrixf _glptr_glMultTransposeMatrixf

typedef void (GL_APIENTRY *PFN_glTexGenf)(GLenum coord, GLenum pname, GLfloat param);
extern PFN_glTexGenf _glptr_glTexGenf;
#define glTexGenf _glptr_glTexGenf

typedef void (GL_APIENTRY *PFN_glMultiDrawElements)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
extern PFN_glMultiDrawElements _glptr_glMultiDrawElements;
#define glMultiDrawElements _glptr_glMultiDrawElements

typedef void (GL_APIENTRY *PFN_glColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
extern PFN_glColor3ub _glptr_glColor3ub;
#define glColor3ub _glptr_glColor3ub

typedef void (GL_APIENTRY *PFN_glPointParameterfv)(GLenum pname, const GLfloat * params);
extern PFN_glPointParameterfv _glptr_glPointParameterfv;
#define glPointParameterfv _glptr_glPointParameterfv

typedef void (GL_APIENTRY *PFN_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
extern PFN_glGetActiveUniform _glptr_glGetActiveUniform;
#define glGetActiveUniform _glptr_glGetActiveUniform

typedef void (GL_APIENTRY *PFN_glLightiv)(GLenum light, GLenum pname, const GLint * params);
extern PFN_glLightiv _glptr_glLightiv;
#define glLightiv _glptr_glLightiv

typedef void (GL_APIENTRY *PFN_glIndexubv)(const GLubyte * c);
extern PFN_glIndexubv _glptr_glIndexubv;
#define glIndexubv _glptr_glIndexubv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern PFN_glMultiTexCoord4f _glptr_glMultiTexCoord4f;
#define glMultiTexCoord4f _glptr_glMultiTexCoord4f

typedef void (GL_APIENTRY *PFN_glPointParameteriv)(GLenum pname, const GLint * params);
extern PFN_glPointParameteriv _glptr_glPointParameteriv;
#define glPointParameteriv _glptr_glPointParameteriv

typedef void (GL_APIENTRY *PFN_glFogCoordf)(GLfloat coord);
extern PFN_glFogCoordf _glptr_glFogCoordf;
#define glFogCoordf _glptr_glFogCoordf

typedef void (GL_APIENTRY *PFN_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint * value);
extern PFN_glClearBufferiv _glptr_glClearBufferiv;
#define glClearBufferiv _glptr_glClearBufferiv

typedef void (GL_APIENTRY *PFN_glFogCoordd)(GLdouble coord);
extern PFN_glFogCoordd _glptr_glFogCoordd;
#define glFogCoordd _glptr_glFogCoordd

typedef void (GL_APIENTRY *PFN_glSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
extern PFN_glSecondaryColor3d _glptr_glSecondaryColor3d;
#define glSecondaryColor3d _glptr_glSecondaryColor3d

typedef void (GL_APIENTRY *PFN_glResumeTransformFeedback)();
extern PFN_glResumeTransformFeedback _glptr_glResumeTransformFeedback;
#define glResumeTransformFeedback _glptr_glResumeTransformFeedback

typedef void (GL_APIENTRY *PFN_glFogCoorddv)(const GLdouble * coord);
extern PFN_glFogCoorddv _glptr_glFogCoorddv;
#define glFogCoorddv _glptr_glFogCoorddv

typedef void (GL_APIENTRY *PFN_glMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
extern PFN_glMultiTexCoord3i _glptr_glMultiTexCoord3i;
#define glMultiTexCoord3i _glptr_glMultiTexCoord3i

typedef void (GL_APIENTRY *PFN_glSecondaryColor3bv)(const GLbyte * v);
extern PFN_glSecondaryColor3bv _glptr_glSecondaryColor3bv;
#define glSecondaryColor3bv _glptr_glSecondaryColor3bv

typedef void (GL_APIENTRY *PFN_glSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
extern PFN_glSecondaryColor3f _glptr_glSecondaryColor3f;
#define glSecondaryColor3f _glptr_glSecondaryColor3f

typedef void (GL_APIENTRY *PFN_glEndConditionalRender)();
extern PFN_glEndConditionalRender _glptr_glEndConditionalRender;
#define glEndConditionalRender _glptr_glEndConditionalRender

typedef void (GL_APIENTRY *PFN_glSecondaryColor3i)(GLint red, GLint green, GLint blue);
extern PFN_glSecondaryColor3i _glptr_glSecondaryColor3i;
#define glSecondaryColor3i _glptr_glSecondaryColor3i
#if defined(__cplusplus)
}
#endif
#endif
